var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/guards/AdminGuard.html",[0,2.567,1,1.934]],["body/guards/AdminGuard.html",[1,3.089,2,2.936,3,0.286,4,0.249,5,0.249,6,3.7,7,0.364,8,1.211,9,5.336,10,4.651,11,5.336,12,0.786,13,4.365,14,1.029,15,0.025,16,0.581,17,0.405,18,1.029,19,3.7,20,0.963,21,4.651,22,0.325,23,0.616,24,0.63,25,0.286,26,0.325,27,1.715,28,2.109,29,1.507,30,1.607,31,4.365,32,1.097,33,4.365,34,2.457,35,0.015,36,0.019,37,0.015]],["title/modules/AppModule.html",[38,1.113,39,2.31]],["body/modules/AppModule.html",[2,1.887,3,0.184,4,0.16,5,0.16,8,0.619,12,0.505,14,0.661,15,0.025,16,0.374,17,0.26,18,0.661,20,0.619,22,0.478,24,0.405,25,0.184,26,0.209,27,1.102,28,1.355,35,0.01,36,0.014,37,0.01,38,1.803,39,4.447,40,1.262,41,1.262,42,1.46,43,1.46,44,1.262,45,2.115,46,1.46,47,2.378,48,2.378,49,3.557,50,3.557,51,3.557,52,3.557,53,2.438,54,2.115,55,1.355,56,1.46,57,2.805,58,2.289,59,2.805,60,4.065,61,5.243,62,2.805,63,2.805,64,2.378,65,4.065,66,2.491,67,1.178,68,2.805,69,4.065,70,2.805,71,2.805,72,2.805,73,1.887,74,2.805,75,2.805,76,2.805,77,2.805,78,2.378,79,2.805,80,3.446,81,4.065,82,4.065,83,2.805,84,2.805,85,2.805,86,2.805,87,2.097,88,2.805,89,2.097,90,2.805,91,0.751,92,2.805,93,2.378,94,2.805,95,2.805,96,1.719,97,2.805,98,2.378,99,2.805,100,2.378,101,1.102,102,2.805,103,2.805,104,2.378,105,2.805,106,2.805]],["title/modules/AuthModule.html",[38,1.113,49,2.105]],["body/modules/AuthModule.html",[3,0.243,4,0.211,5,0.211,15,0.025,22,0.44,24,0.534,25,0.243,26,0.275,29,1.702,35,0.013,36,0.017,37,0.013,38,1.796,40,2.219,41,1.665,42,1.926,43,1.926,44,1.665,45,2.566,46,1.926,49,3.881,53,2.716,54,2.566,55,1.788,56,1.926,58,2.776,87,2.767,100,3.138,101,1.455,107,3.701,108,3.701,109,3.701,110,4.931,111,3.138,112,4.26,113,3.701,114,2.49,115,2.49,116,3.701,117,4.931,118,3.701,119,3.701,120,4.931,121,3.701,122,3.701,123,2.767,124,3.138,125,3.701,126,3.701,127,3.138,128,3.701,129,3.701,130,3.138,131,3.701,132,3.701,133,1.455,134,3.701,135,3.701]],["title/injectables/AuthenticationMiddleware.html",[23,0.386,73,2.31]],["body/injectables/AuthenticationMiddleware.html",[3,0.193,4,0.168,5,0.168,7,0.246,8,0.93,12,0.758,15,0.025,20,0.65,22,0.366,23,0.473,24,0.425,25,0.193,26,0.313,27,1.158,28,2.035,32,1.235,35,0.01,36,0.015,37,0.01,73,3.306,96,2.581,98,2.498,104,4.167,115,1.982,123,3.148,136,0.954,137,2.498,138,2.202,139,1.551,140,1.495,141,4.915,142,5.363,143,2.946,144,4.915,145,1.982,146,1.238,147,4.212,148,2.946,149,4.212,150,4.212,151,4.212,152,2.202,153,3.57,154,3.816,155,2.202,156,2.946,157,2.946,158,4.167,159,4.212,160,4.212,161,3.57,162,2.946,163,2.946,164,2.946,165,4.212,166,4.212,167,2.946,168,2.946,169,2.833,170,2.946,171,0.954,172,3.148,173,3.57,174,4.212,175,3.57,176,2.946,177,4.212,178,2.498,179,2.946,180,2.946,181,2.946,182,2.946,183,2.946,184,2.946,185,2.946,186,2.498,187,2.946,188,2.946,189,2.946,190,2.498,191,2.946,192,3.57,193,2.946,194,2.946,195,2.946,196,4.167,197,2.946,198,2.946,199,2.946,200,2.946,201,2.946,202,2.946,203,2.946,204,2.946,205,2.498,206,2.946,207,2.946,208,2.946,209,2.946,210,2.946,211,2.946,212,2.946]],["title/classes/CreateHospitalDto.html",[26,0.256,213,2.105]],["body/classes/CreateHospitalDto.html",[3,0.288,4,0.25,5,0.25,7,0.365,12,1.082,15,0.024,16,0.801,17,0.557,22,0.409,25,0.288,26,0.326,30,2.025,35,0.015,36,0.019,37,0.015,91,1.174,139,2.025,213,3.37,214,2.947,215,3.28,216,3.714,217,4.042,218,3.384,219,3.683,220,4.381,221,4.381,222,2.161,223,4.381,224,1.512,225,4.381]],["title/classes/CreatePreparationDto.html",[26,0.256,226,2.105]],["body/classes/CreatePreparationDto.html",[3,0.267,4,0.233,5,0.233,7,0.34,12,1.105,15,0.024,17,0.614,22,0.432,25,0.267,26,0.391,35,0.014,36,0.018,37,0.014,91,1.092,139,1.934,214,2.741,215,3.305,222,2.064,224,1.407,226,3.218,227,3.455,228,2.858,229,1.461,230,3.561,231,2.498,232,5.811,233,4.076,234,4.076,235,2.363,236,4.076,237,2.441,238,4.076,239,3.047,240,3.455]],["title/injectables/DatePipe.html",[23,0.386,241,2.31]],["body/injectables/DatePipe.html",[3,0.28,4,0.244,5,0.244,7,0.356,8,1.194,12,0.769,14,1.006,15,0.024,16,0.569,17,0.396,18,1.006,20,0.942,22,0.402,23,0.607,24,0.616,25,0.28,26,0.318,27,1.678,32,1.073,35,0.015,36,0.019,37,0.015,136,1.383,146,2.273,241,3.639,242,3.619,243,2.815,244,2.815,245,2.869,246,3.249,247,4.269,248,2.815,249,2.815,250,2.616,251,4.269,252,4.269,253,1.645,254,4.269,255,2.222]],["title/injectables/DateUnitPipe.html",[23,0.386,256,2.31]],["body/injectables/DateUnitPipe.html",[3,0.273,4,0.238,5,0.238,7,0.347,8,1.175,12,0.749,14,0.981,15,0.025,16,0.555,17,0.386,18,0.981,20,0.919,22,0.396,23,0.598,24,0.6,25,0.273,26,0.31,27,1.636,32,1.046,34,2.344,35,0.015,36,0.019,37,0.015,136,1.348,146,2.466,228,1.873,243,2.77,244,2.77,245,2.835,246,3.219,248,2.77,249,2.77,253,1.266,255,2.166,256,3.581,257,3.979,258,3.529,259,4.163,260,3.581,261,2.8,262,3.112,263,4.163]],["title/injectables/DistancePipe.html",[23,0.386,264,2.31]],["body/injectables/DistancePipe.html",[3,0.285,4,0.248,5,0.248,7,0.363,8,1.208,12,0.783,14,1.025,15,0.024,16,0.579,17,0.403,18,1.025,20,0.96,22,0.324,23,0.615,24,0.627,25,0.285,26,0.324,27,1.709,32,1.093,35,0.015,36,0.019,37,0.015,136,1.409,146,2.516,243,2.848,244,2.848,245,2.894,246,3.271,248,2.848,249,2.848,253,1.322,255,2.263,264,3.681,265,3.687,266,4.348,267,2.925]],["title/interfaces/GeoJSONMultiPoint.html",[171,1.113,219,2.105]],["body/interfaces/GeoJSONMultiPoint.html",[3,0.306,4,0.266,5,0.266,7,0.389,15,0.024,17,0.613,22,0.347,25,0.306,35,0.016,36,0.02,37,0.016,91,1.249,139,2.104,140,1.737,171,1.51,217,4.333,219,3.502,235,2.097,268,2.425,269,3.951,270,3.217,271,3.479,272,3.951]],["title/interfaces/Hospital.html",[171,1.113,229,0.863]],["body/interfaces/Hospital.html",[3,0.265,4,0.23,5,0.23,7,0.336,15,0.024,16,0.814,17,0.567,22,0.455,25,0.265,30,2.129,35,0.014,36,0.018,37,0.014,91,1.081,139,1.921,140,1.859,171,1.307,218,3.442,219,3.746,229,1.311,268,2.099,270,2.937,271,3.256,273,3.419,274,4.112,275,6.114,276,2.953,277,1.859,278,4.033,279,4.033,280,4.033]],["title/injectables/HospitalIdPipe.html",[23,0.386,281,2.31]],["body/injectables/HospitalIdPipe.html",[3,0.265,4,0.23,5,0.23,7,0.336,8,1.152,12,0.726,14,0.95,15,0.025,16,0.537,17,0.374,18,0.95,20,0.89,22,0.388,23,0.586,24,0.582,25,0.265,26,0.3,27,1.585,30,1.485,32,1.014,35,0.014,36,0.018,37,0.014,91,1.081,136,1.307,146,2.192,205,3.419,224,1.392,243,2.715,244,2.715,245,2.793,246,3.181,248,2.715,249,2.099,253,1.226,255,2.099,281,3.509,282,3.9,283,3.419,284,1.949,285,5.217,286,4.423,287,5.217,288,5.217,289,4.033,290,4.033,291,4.033,292,4.033]],["title/controllers/HospitalsController.html",[293,1.545,294,2.31]],["body/controllers/HospitalsController.html",[1,2.686,3,0.13,4,0.113,5,0.113,7,0.165,8,0.688,12,0.859,14,1.033,15,0.025,16,0.584,17,0.407,18,1.033,20,1.25,22,0.447,24,0.285,25,0.13,26,0.147,29,2.105,32,1.199,35,0.007,36,0.011,37,0.007,101,0.776,133,1.517,140,0.948,169,2.948,213,3.107,215,1.028,224,1.076,229,1.486,231,2.924,235,2.547,237,0.83,253,1.451,264,2.097,277,0.948,284,2.118,293,0.889,294,2.097,295,1.675,296,1.329,297,3.566,298,2.809,299,3.117,300,3.273,301,3.716,302,2.642,303,3.117,304,1.976,305,1.675,306,1.976,307,2.642,308,3.86,309,2.642,310,2.642,311,1.976,312,4.298,313,4.045,314,3.117,315,1.976,316,2.642,317,2.642,318,4.298,319,3.716,320,3.277,321,3.117,322,3.117,323,2.449,324,1.976,325,1.976,326,1.675,327,2.762,328,3.117,329,1.976,330,2.097,331,3.277,332,1.976,333,3.117,334,1.976,335,3.117,336,2.33,337,1.675,338,1.477,339,2.33,340,1.211,341,2.009,342,1.675,343,1.675,344,1.477,345,1.675,346,1.329,347,1.329,348,1.329,349,1.112,350,2.097,351,1.976,352,2.097,353,1.976,354,1.976,355,1.976,356,0.889,357,1.506,358,3.107,359,2.33,360,1.976,361,1.972,362,1.976,363,1.976,364,1.976,365,1.976,366,1.976,367,1.976,368,1.976,369,1.976,370,1.477,371,1.675,372,1.976]],["title/modules/HospitalsModule.html",[38,1.113,50,2.105]],["body/modules/HospitalsModule.html",[3,0.234,4,0.204,5,0.204,15,0.025,16,0.776,22,0.476,24,0.514,25,0.234,26,0.265,35,0.012,36,0.017,37,0.012,38,1.763,40,1.605,41,1.605,42,1.856,43,1.856,44,1.605,45,2.832,46,1.856,50,3.99,53,2.632,54,2.503,55,1.723,56,1.856,58,2.708,66,2.185,67,1.498,101,1.89,114,2.399,229,0.896,253,1.084,277,1.084,294,3.66,341,3.26,342,3.023,373,3.023,374,3.566,375,3.023,376,3.566,377,3.566,378,2.947,379,2.666,380,2.947,381,2.666,382,3.566,383,3.566,384,3.566,385,3.023,386,2.185,387,3.569,388,3.235]],["title/injectables/HospitalsService.html",[23,0.386,341,1.787]],["body/injectables/HospitalsService.html",[3,0.159,4,0.138,5,0.138,7,0.202,8,0.804,12,0.942,14,1.149,15,0.025,16,0.65,17,0.51,18,1.149,20,1.077,22,0.425,23,0.409,24,0.349,25,0.159,26,0.18,28,1.759,32,1.226,35,0.008,36,0.013,37,0.008,67,1.015,91,0.647,136,0.783,140,1.107,192,3.087,213,3.206,215,1.257,217,2.449,222,1.722,224,0.834,229,0.915,235,2.704,237,1.015,253,0.735,255,1.257,277,0.735,298,2.836,300,4.134,301,4.134,312,3.714,313,4.436,318,4.134,320,1.806,323,2.838,340,2.231,341,1.895,345,2.049,346,1.625,349,1.361,356,1.638,357,1.759,361,1.971,386,3.497,389,2.049,390,3.087,391,4.381,392,2.049,393,3.275,394,2.416,395,2.722,396,3.641,397,2.416,398,2.416,399,2.416,400,1.806,401,2.416,402,2.416,403,2.416,404,2.467,405,1.625,406,1.625,407,1.806,408,1.806,409,2.416,410,1.806,411,2.416,412,1.625,413,2.416,414,2.416,415,2.416,416,3.641,417,2.416,418,2.416,419,2.049,420,2.416,421,2.416,422,2.416,423,2.049,424,3.087,425,2.947,426,1.806,427,1.806,428,2.416]],["title/injectables/LatitudinePipe.html",[23,0.386,352,2.31]],["body/injectables/LatitudinePipe.html",[3,0.295,4,0.257,5,0.257,7,0.375,8,1.234,12,0.81,14,1.06,15,0.024,16,0.599,17,0.417,18,1.06,20,0.993,22,0.335,23,0.628,24,0.649,25,0.295,26,0.335,27,1.768,35,0.016,36,0.019,37,0.016,136,1.457,146,2.349,243,2.909,244,2.909,245,2.939,246,3.311,248,2.909,249,2.341,352,3.761,429,3.814,430,4.499,431,3.814]],["title/injectables/LoggerService.html",[23,0.386,432,2.567]],["body/injectables/LoggerService.html",[3,0.156,4,0.136,5,0.136,7,0.199,8,0.795,12,1.023,14,0.849,15,0.025,16,0.48,17,0.507,18,0.849,20,0.795,21,3.682,22,0.268,23,0.404,24,0.344,25,0.156,26,0.268,28,1.151,30,2.364,32,0.905,34,1.341,35,0.008,36,0.013,37,0.008,55,2.098,64,3.054,96,1.46,115,1.602,124,2.019,130,2.019,136,0.772,138,1.781,139,1.326,140,1.663,145,3.256,146,2.034,172,1.781,175,2.019,196,4.958,235,1.072,250,1.46,253,1.321,267,2.423,356,1.954,357,3.129,400,1.781,432,2.692,433,1.781,434,4.343,435,4.343,436,4.842,437,4.343,438,4.343,439,3.602,440,3.602,441,3.602,442,2.382,443,4.842,444,3.602,445,4.842,446,2.382,447,3.602,448,2.382,449,2.382,450,4.105,451,3.602,452,2.382,453,2.382,454,2.382,455,1.781,456,2.019,457,2.019,458,2.019,459,2.019,460,2.019,461,3.602,462,2.382,463,2.382,464,2.382,465,3.602,466,2.382,467,2.382,468,2.382,469,2.382,470,2.382,471,2.382,472,2.382,473,2.382,474,3.602,475,2.382,476,2.382,477,2.382,478,2.382,479,2.382,480,2.382,481,2.382,482,2.382,483,2.382,484,3.054,485,2.382,486,2.382,487,3.602]],["title/injectables/LongitudinePipe.html",[23,0.386,350,2.31]],["body/injectables/LongitudinePipe.html",[3,0.295,4,0.257,5,0.257,7,0.375,8,1.234,12,0.81,14,1.06,15,0.024,16,0.599,17,0.417,18,1.06,20,0.993,22,0.335,23,0.628,24,0.649,25,0.295,26,0.335,27,1.768,35,0.016,36,0.019,37,0.016,136,1.457,146,2.349,243,2.909,244,2.909,245,2.939,246,3.311,248,2.909,249,2.341,350,3.761,431,3.814,488,3.814,489,4.499]],["title/interfaces/Preparation.html",[171,1.113,277,1.044]],["body/interfaces/Preparation.html",[3,0.257,4,0.223,5,0.223,7,0.326,15,0.025,17,0.623,22,0.424,25,0.257,35,0.014,36,0.018,37,0.014,91,1.048,139,1.883,140,1.907,171,1.267,222,2.239,224,1.351,228,2.948,229,1.67,230,3.703,235,2.564,237,2.539,239,2.924,268,2.036,270,2.879,271,3.208,277,1.555,425,4.064,490,3.316,491,3.316]],["title/injectables/PreparationTypePipe.html",[23,0.386,492,2.105]],["body/injectables/PreparationTypePipe.html",[3,0.265,4,0.23,5,0.23,7,0.336,8,1.152,12,0.726,14,0.95,15,0.025,16,0.537,17,0.484,18,0.95,20,0.89,22,0.388,23,0.586,24,0.582,25,0.265,26,0.3,27,1.585,30,2.129,32,1.014,34,2.271,35,0.014,36,0.018,37,0.014,136,1.307,146,2.568,237,2.568,239,3.015,243,2.715,244,2.715,245,2.793,246,3.181,248,2.715,249,2.715,253,1.226,255,2.099,277,1.226,492,3.197,493,3.509,494,3.419,495,4.033,496,2.713,497,4.033,498,4.033]],["title/controllers/PreparationsController.html",[293,1.545,499,2.31]],["body/controllers/PreparationsController.html",[1,2.398,3,0.151,4,0.132,5,0.132,7,0.192,8,0.776,12,0.633,14,0.828,15,0.025,16,0.468,17,0.55,18,0.828,20,1.051,22,0.464,24,0.333,25,0.151,26,0.172,28,1.114,29,2.089,32,0.58,35,0.008,36,0.012,37,0.008,78,2.98,91,0.618,101,0.907,133,1.872,140,1.069,154,2.364,155,2.628,215,1.2,218,1.979,222,0.907,224,1.47,226,3.31,228,2.723,229,1.197,231,2.154,237,2.001,241,2.865,253,1.559,277,1.804,284,1.698,293,1.038,296,1.552,298,2.43,305,1.956,307,2.98,309,4.038,310,2.98,319,2.98,323,1.698,327,2.478,330,2.364,337,1.956,338,1.724,339,2.628,340,1.414,344,1.724,347,1.552,348,1.552,349,1.299,356,1.038,357,1.698,358,3.31,359,1.724,361,2.143,370,1.724,404,1.299,406,1.552,492,2.154,493,1.552,499,2.364,500,1.956,501,3.515,502,4.259,503,2.307,504,2.307,505,3.515,506,4.259,507,2.307,508,3.832,509,4.346,510,2.98,511,2.307,512,3.515,513,3.515,514,3.515,515,3.515,516,3.515,517,2.398,518,1.956,519,1.956,520,1.956,521,1.956,522,2.307,523,2.307,524,2.307,525,2.307,526,2.307,527,2.307,528,2.307,529,2.307,530,1.956,531,2.307,532,2.307,533,3.515,534,2.307,535,1.724,536,2.307]],["title/modules/PreparationsModule.html",[38,1.113,51,2.105]],["body/modules/PreparationsModule.html",[3,0.241,4,0.209,5,0.209,15,0.025,16,0.653,22,0.48,24,0.529,25,0.241,26,0.273,35,0.013,36,0.017,37,0.013,38,1.788,40,1.65,41,1.65,42,1.908,43,1.908,44,1.65,45,2.872,46,1.908,51,4.016,53,2.653,54,2.55,55,1.771,56,1.908,58,2.759,66,2.247,67,1.54,101,1.926,114,2.466,229,0.922,277,1.115,378,3.003,379,2.741,380,3.003,381,2.741,385,3.109,387,3.382,388,2.466,499,3.712,517,3.556,518,3.109,537,3.109,538,3.667,539,3.109,540,3.667,541,3.667,542,3.109]],["title/injectables/PreparationsService.html",[23,0.386,517,1.934]],["body/injectables/PreparationsService.html",[3,0.169,4,0.147,5,0.147,7,0.214,8,0.842,12,0.905,14,1.185,15,0.025,16,0.67,17,0.522,18,1.185,20,1.003,22,0.445,23,0.428,24,0.371,25,0.169,26,0.191,28,1.242,32,1.143,34,1.447,35,0.009,36,0.013,37,0.009,38,0.833,67,1.08,91,0.689,136,0.833,140,1.159,215,1.338,218,2.147,222,2.402,224,0.887,226,3.448,228,2.532,229,0.646,230,1.575,237,2.113,250,2.337,253,0.782,277,0.782,298,2.75,317,3.854,323,2.718,346,1.729,349,1.447,356,1.716,357,1.842,361,1.716,386,3.57,390,3.854,392,2.179,393,3.759,395,2.85,404,3.024,405,1.729,406,1.729,407,1.921,408,1.921,410,2.85,412,1.729,426,1.921,427,1.921,517,2.147,520,2.179,543,2.179,544,4.546,545,4.546,546,2.57,547,2.57,548,2.57,549,4.546,550,2.57,551,2.57,552,2.57,553,4.263,554,2.57,555,2.57,556,2.57,557,2.57,558,2.57,559,2.57,560,2.57,561,2.57,562,2.57,563,2.57,564,2.57,565,2.179,566,2.57,567,2.57,568,2.179,569,2.57,570,2.57,571,2.57,572,2.57,573,2.57,574,2.179,575,2.57]],["title/interfaces/Rank.html",[171,1.113,276,1.659]],["body/interfaces/Rank.html",[3,0.293,4,0.255,5,0.255,7,0.372,15,0.024,17,0.562,22,0.332,25,0.293,30,2.232,35,0.016,36,0.019,37,0.016,91,1.196,139,2.049,171,1.446,228,2.728,235,2.728,268,2.323,270,3.133,271,3.413,276,3.216,576,3.785,577,5.38,578,4.744]],["title/controllers/RankingController.html",[293,1.545,579,2.31]],["body/controllers/RankingController.html",[1,2.052,3,0.119,4,0.103,5,0.103,7,0.151,8,0.642,12,0.751,14,0.859,15,0.025,16,0.485,17,0.589,18,0.859,20,1.297,22,0.437,24,0.261,25,0.119,26,0.135,29,1.949,32,1.149,35,0.006,36,0.01,37,0.006,91,0.485,101,0.711,133,1.432,140,0.884,152,2.174,169,1.956,222,1.64,224,0.625,228,1.877,229,1.226,231,2.557,237,2.24,253,1.673,256,3.074,257,1.353,260,4.458,262,1.353,274,1.956,276,2.357,277,1.621,281,2.451,282,1.353,284,1.76,293,0.815,296,1.218,297,2.174,298,2.686,327,2.171,330,1.956,331,2.174,338,1.353,340,1.109,344,1.353,347,1.218,348,1.218,349,1.019,356,0.815,357,1.405,358,3.267,359,1.353,361,2.195,370,1.353,404,2.747,492,2.557,493,1.218,510,2.465,519,1.535,521,1.535,530,3.089,578,4.22,579,1.956,580,1.535,581,3.416,582,3.644,583,3.089,584,4.172,585,3.537,586,1.81,587,2.908,588,1.81,589,4.137,590,3.119,591,2.465,592,1.956,593,1.81,594,1.81,595,3.537,596,3.119,597,1.81,598,2.908,599,1.81,600,2.174,601,2.174,602,1.81,603,1.81,604,2.908,605,2.908,606,2.052,607,1.535,608,1.109,609,1.81,610,1.81,611,1.81,612,1.81,613,4.172,614,1.81,615,1.81,616,2.908,617,1.81,618,1.81,619,1.81]],["title/modules/RankingModule.html",[38,1.113,52,2.105]],["body/modules/RankingModule.html",[3,0.226,4,0.197,5,0.197,15,0.025,16,0.713,22,0.488,24,0.498,25,0.226,26,0.257,35,0.012,36,0.016,37,0.012,38,1.733,40,1.552,41,1.552,42,1.795,43,1.795,44,1.552,45,2.784,46,1.795,52,4.061,53,2.607,54,2.447,55,1.667,56,1.795,58,2.648,66,2.114,67,1.45,101,1.848,114,2.321,229,0.867,276,1.667,277,1.049,341,3.229,378,2.882,379,2.579,380,2.882,381,2.579,387,3.279,388,2.321,579,3.599,606,3.493,607,2.925,620,2.925,621,3.45,622,2.925,623,3.45,624,3.45,625,3.515,626,3.45,627,3.45]],["title/injectables/RankingService.html",[23,0.386,606,1.934]],["body/injectables/RankingService.html",[3,0.099,4,0.086,5,0.086,7,0.125,8,0.551,12,0.745,14,0.879,15,0.025,16,0.595,17,0.439,18,0.879,20,0.823,22,0.395,23,0.28,24,0.217,25,0.099,26,0.112,28,2.485,32,0.937,34,1.803,35,0.005,36,0.009,37,0.005,67,0.631,91,0.402,96,0.92,136,0.486,140,0.973,145,1.01,152,1.122,190,1.273,218,0.845,222,1.755,224,0.518,228,1.123,229,0.627,230,0.92,237,1.567,250,1.529,253,1.358,255,0.781,260,3.989,261,1.678,262,1.122,267,1.678,274,1.678,276,1.205,277,0.456,284,1.205,286,1.273,297,3.094,298,2.314,323,1.205,340,2.737,346,1.01,349,0.845,356,1.123,357,2.158,358,0.92,361,1.678,386,3.251,393,1.865,395,2.393,400,1.122,404,2.79,405,1.01,406,1.01,407,1.122,408,1.122,410,1.865,412,1.01,423,2.115,424,2.115,425,3.184,427,1.122,450,2.115,496,1.678,508,2.788,509,2.714,535,1.122,553,4.361,565,1.273,568,1.273,574,1.273,581,3.094,583,2.714,585,3.162,589,1.273,590,2.393,591,1.273,596,1.122,600,1.122,601,1.122,606,1.405,608,0.92,628,1.273,629,2.495,630,3.202,631,1.501,632,3.202,633,1.501,634,2.495,635,1.501,636,1.501,637,4.466,638,1.501,639,1.501,640,1.501,641,1.501,642,1.501,643,1.01,644,1.122,645,1.501,646,1.501,647,1.501,648,1.501,649,1.501,650,1.501,651,1.501,652,1.501,653,1.501,654,1.501,655,1.501,656,1.501,657,1.501,658,2.495,659,2.495,660,1.501,661,1.273,662,1.273,663,1.501,664,1.501,665,1.501,666,1.501,667,1.501,668,1.501,669,1.501,670,3.202,671,3.202,672,1.501,673,1.501,674,3.202,675,1.501,676,1.501,677,1.501,678,1.501,679,1.501,680,1.501,681,1.501,682,1.501,683,1.501,684,1.501,685,1.501,686,1.501,687,3.73,688,1.501,689,1.501,690,1.501,691,1.501,692,1.501,693,2.495,694,1.501,695,1.501,696,1.501,697,2.495,698,1.501,699,1.501,700,1.501,701,1.501,702,2.495,703,1.501,704,1.501,705,1.501,706,1.501,707,1.501,708,1.501,709,1.501,710,1.501,711,1.501,712,1.501,713,2.495,714,1.501,715,1.501,716,1.501,717,1.501,718,1.501,719,1.501,720,1.501,721,1.501,722,1.501,723,2.495,724,1.501,725,2.714,726,3.509,727,1.501,728,1.501,729,1.501,730,2.495,731,2.495,732,1.501,733,1.501,734,1.501,735,2.495,736,1.501,737,1.501,738,1.501,739,1.501]],["title/interfaces/TypeRank.html",[171,1.113,643,2.31]],["body/interfaces/TypeRank.html",[3,0.261,4,0.227,5,0.227,7,0.332,15,0.025,16,0.861,17,0.585,22,0.296,25,0.261,30,2.115,35,0.014,36,0.018,37,0.014,91,1.066,139,1.904,171,1.289,222,2.258,224,1.374,229,1.529,235,2.907,268,2.07,270,2.911,271,3.234,284,1.922,425,4.091,581,4.712,592,3.478,595,3.373,643,3.478,644,2.974,726,5.156,740,3.373]],["title/interfaces/User.html",[29,1.186,171,1.113]],["body/interfaces/User.html",[3,0.277,4,0.241,5,0.241,7,0.352,15,0.024,17,0.548,22,0.4,25,0.277,29,1.855,30,2.175,35,0.015,36,0.019,37,0.015,91,1.131,139,1.978,140,1.797,171,1.368,222,2.58,224,1.458,229,1.697,268,2.198,270,3.025,271,3.327,404,3.502,491,3.58,741,3.58,742,4.183]],["title/controllers/UserController.html",[293,1.545,743,2.31]],["body/controllers/UserController.html",[3,0.252,4,0.219,5,0.219,7,0.32,8,1.114,12,0.69,14,0.904,15,0.025,16,0.511,17,0.356,18,0.904,20,0.847,22,0.446,24,0.553,25,0.252,26,0.285,29,2.311,32,0.964,35,0.013,36,0.018,37,0.013,101,1.507,133,2.218,140,1.166,169,3.395,229,1.269,231,2.35,284,1.853,293,1.726,296,2.579,298,2.539,302,4.279,323,2.439,326,3.251,327,3.12,330,3.395,331,3.773,347,2.579,348,2.579,358,2.35,361,1.726,371,3.251,743,3.395,744,3.251,745,5.048,746,3.835,747,3.251,748,3.835,749,3.251,750,3.835]],["title/classes/UserDto.html",[26,0.256,327,1.787]],["body/classes/UserDto.html",[3,0.317,4,0.276,5,0.276,7,0.403,12,0.87,15,0.024,17,0.448,25,0.317,26,0.36,30,2.151,35,0.017,36,0.02,37,0.017,139,2.151,214,3.251,327,3.04,336,4.367,742,3.93,751,4.098,752,6.279,753,4.834]],["title/guards/UserGuard.html",[0,2.567,112,2.31]],["body/guards/UserGuard.html",[2,2.498,3,0.244,4,0.212,5,0.212,7,0.31,8,1.091,9,5.019,10,4.189,11,5.019,12,0.89,14,1.164,15,0.025,16,0.658,17,0.458,18,1.164,19,3.148,20,0.82,22,0.368,23,0.555,24,0.536,25,0.244,26,0.276,27,1.459,29,1.282,32,0.933,35,0.013,36,0.017,37,0.013,53,1.56,87,2.776,112,3.324,115,2.498,133,2.543,138,2.776,140,1.129,178,3.148,298,2.499,323,2.387,336,2.776,343,3.148,356,1.671,361,1.671,592,3.324,662,3.148,749,3.148,754,3.148,755,3.713,756,3.713,757,3.713,758,3.713,759,3.713,760,3.713,761,3.713,762,3.713,763,3.713,764,3.713,765,3.713,766,3.713,767,3.713,768,3.713,769,3.713,770,3.713,771,3.713]],["title/modules/UserModule.html",[38,1.113,53,1.443]],["body/modules/UserModule.html",[3,0.256,4,0.223,5,0.223,15,0.025,16,0.519,22,0.466,24,0.562,25,0.256,26,0.29,29,1.346,35,0.014,36,0.018,37,0.014,38,1.843,40,1.754,41,1.754,42,2.029,43,2.029,44,1.754,45,2.96,46,2.96,53,2.751,54,2.656,55,1.884,56,2.029,58,2.195,66,2.389,67,1.638,101,2.006,133,2.7,387,2.389,388,2.623,743,3.826,747,3.305,772,3.305,773,3.305,774,3.305,775,3.899,776,5.103,777,3.814,778,3.899,779,3.899]],["title/injectables/UserService.html",[23,0.386,133,1.35]],["body/injectables/UserService.html",[3,0.167,4,0.145,5,0.145,7,0.212,8,0.834,12,1.044,14,1.259,15,0.025,16,0.712,17,0.538,18,1.259,20,1.179,22,0.397,23,0.424,24,0.366,25,0.167,26,0.189,29,1.557,30,2.392,32,1.256,35,0.009,36,0.013,37,0.009,67,1.066,91,0.68,133,1.484,136,0.822,139,1.39,140,1.148,154,1.706,186,2.151,222,0.997,224,0.876,298,2.947,316,2.151,323,1.824,339,1.896,356,1.699,357,2.879,361,2.248,386,3.062,405,1.706,412,2.54,535,1.896,592,1.706,742,3.593,780,2.151,781,4.511,782,3.776,783,3.776,784,4.997,785,3.776,786,3.776,787,2.537,788,5.8,789,2.537,790,3.776,791,2.537,792,3.776,793,3.776,794,2.537,795,2.537,796,3.776,797,2.537,798,3.776,799,2.537,800,2.537,801,2.537,802,2.151,803,2.537,804,2.537,805,2.537,806,2.537,807,3.776,808,2.537,809,2.537,810,2.537,811,2.537,812,2.537,813,2.537,814,2.537,815,2.537,816,2.537,817,2.537,818,2.537,819,2.537,820,2.537,821,2.537,822,2.537,823,2.537,824,2.537,825,2.537,826,2.537,827,2.537,828,2.537,829,2.537]],["title/coverage.html",[830,3.504]],["body/coverage.html",[0,2.846,1,1.444,5,0.146,6,2.174,15,0.025,17,0.238,23,0.724,26,0.338,29,1.314,35,0.009,36,0.013,37,0.009,44,1.154,73,1.725,112,1.725,133,1.008,137,2.174,171,1.821,172,1.917,213,1.572,215,1.981,216,2.174,219,1.572,226,1.572,227,2.174,229,0.645,241,1.725,242,2.174,253,0.78,256,1.725,257,1.917,258,2.174,261,1.725,264,1.725,265,2.174,267,4.673,269,2.174,273,2.174,276,1.239,277,0.78,281,1.725,282,1.917,283,2.174,293,2.26,294,1.725,295,2.174,327,1.335,341,1.335,350,1.725,352,1.725,378,1.572,380,1.572,389,2.174,419,2.174,429,2.174,432,1.917,433,2.846,455,1.917,488,2.174,490,2.174,492,1.572,493,1.725,494,2.174,496,1.725,499,1.725,500,2.174,517,1.444,543,2.174,576,2.174,579,1.725,580,2.174,606,1.444,608,1.572,625,1.917,628,2.174,643,1.725,644,1.917,661,2.174,740,2.174,741,2.174,743,1.725,744,2.174,751,2.174,754,2.174,777,1.917,780,2.174,830,1.917,831,2.565,832,2.565,833,2.565,834,1.917,835,6.108,836,6.108,837,2.174,838,4.54,839,4.54,840,4.54,841,4.54,842,4.54,843,4.54,844,2.565,845,2.565,846,5.821,847,1.917,848,2.565,849,2.174,850,2.174,851,2.174,852,2.174,853,2.174,854,2.174,855,2.174,856,2.565,857,2.565,858,2.565,859,2.565,860,2.565,861,2.565,862,3.807,863,2.565]],["title/dependencies.html",[41,1.859,864,2.868]],["body/dependencies.html",[15,0.025,24,0.603,26,0.397,35,0.015,36,0.019,37,0.015,41,1.88,67,1.755,80,3.542,91,1.119,111,3.542,154,3.589,155,3.123,158,3.542,161,3.542,240,3.542,245,2.018,250,2.56,802,3.542,865,5.336,866,4.178,867,4.178,868,4.178,869,4.178,870,4.178,871,4.178,872,4.178,873,4.178,874,4.178,875,4.178,876,4.178,877,4.178,878,4.178,879,4.178,880,4.178,881,4.178,882,4.178,883,4.178,884,4.178,885,4.178,886,4.178,887,4.178,888,4.178,889,4.178,890,4.178,891,4.178,892,4.178,893,3.542,894,4.178]],["title/miscellaneous/functions.html",[895,1.615,896,3.502]],["body/miscellaneous/functions.html",[7,0.444,15,0.022,35,0.019,36,0.022,37,0.019,44,2.941,855,4.508,895,2.994,896,4.508,897,5.317]],["title/index.html",[7,0.239,898,2.868,899,2.868]],["body/index.html",[4,0.216,15,0.024,35,0.013,36,0.017,37,0.013,93,4.753,123,2.83,127,3.209,284,1.829,484,3.209,508,2.83,596,2.83,725,3.209,830,2.83,893,3.209,900,3.785,901,3.785,902,5.005,903,3.785,904,3.785,905,3.785,906,3.785,907,3.785,908,3.785,909,3.785,910,3.785,911,3.785,912,3.785,913,3.785,914,3.785,915,5.607,916,6.5,917,3.785,918,3.785,919,3.785,920,6.373,921,3.785,922,5.005,923,3.785,924,3.785,925,3.785,926,5.607,927,5.005,928,3.785,929,3.785,930,3.785,931,4.243,932,5.005,933,5.005,934,3.785,935,3.785,936,3.785,937,3.785,938,3.785,939,3.785,940,3.785,941,3.785,942,3.785,943,3.785,944,3.785,945,3.785,946,3.785,947,3.785,948,3.785,949,3.785,950,3.785,951,3.785,952,3.785,953,3.785]],["title/modules.html",[40,2.109]],["body/modules.html",[15,0.02,35,0.017,36,0.02,37,0.017,39,3.238,40,2.166,49,2.95,50,2.95,51,2.95,52,2.95,53,2.022,931,5.748,954,6.78,955,6.78,956,6.78]],["title/overview.html",[957,3.975]],["body/overview.html",[2,2.391,15,0.024,35,0.012,36,0.017,37,0.012,38,1.152,39,4.557,40,1.6,41,1.6,42,1.85,43,1.85,44,1.6,45,1.85,46,1.85,47,3.014,48,3.014,49,3.723,50,3.921,51,3.921,52,4.041,53,2.8,54,2.497,55,1.717,56,1.85,101,1.397,133,2.515,136,1.152,214,2.391,268,1.85,341,3.027,373,3.014,375,3.014,517,3.059,537,3.014,539,3.014,606,3.059,620,3.014,622,3.014,772,3.014,773,3.014,774,3.014,957,3.014,958,4.799,959,3.555,960,3.555,961,3.555,962,3.555]],["title/miscellaneous/typealiases.html",[895,1.615,963,4.131]],["body/miscellaneous/typealiases.html",[7,0.432,15,0.021,17,0.48,35,0.018,36,0.021,37,0.018,237,2.557,260,4.093,608,3.172,834,4.549,847,3.869,895,2.914,964,5.176,965,4.388,966,4.388]],["title/miscellaneous/variables.html",[89,3.088,895,1.615]],["body/miscellaneous/variables.html",[7,0.21,15,0.025,16,0.336,17,0.611,29,1.297,30,1.961,32,0.634,35,0.009,36,0.013,37,0.009,89,1.884,96,3.547,145,4.089,146,2.554,153,2.137,173,2.137,217,2.528,218,2.116,228,1.691,229,1.404,230,1.545,235,2.022,253,1.62,261,2.528,272,2.137,274,1.695,276,1.816,277,0.766,320,1.884,378,2.303,380,2.303,387,1.545,426,1.884,433,1.884,455,2.809,456,2.137,457,2.137,458,2.137,459,2.137,460,2.137,496,3.022,542,2.137,577,2.137,578,1.884,590,1.884,600,1.884,601,1.884,608,1.545,625,3.359,742,1.695,777,2.809,834,2.809,837,2.137,847,1.884,849,2.137,850,3.809,851,2.137,852,2.137,853,2.137,854,2.137,895,1.419,965,2.137,966,2.137,967,2.521,968,2.521,969,2.521,970,2.521,971,2.521,972,2.521,973,2.521,974,4.981,975,3.758,976,2.521,977,3.758,978,2.521,979,5.948,980,2.521,981,2.521,982,6.08,983,4.493,984,2.521,985,2.521,986,2.521,987,3.758,988,2.521,989,2.521,990,2.521,991,3.758,992,2.521,993,2.521,994,2.521,995,2.521,996,2.521,997,2.521,998,2.521,999,2.521,1000,2.521,1001,2.521,1002,2.521,1003,2.521,1004,2.521,1005,2.521,1006,2.521]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthenticationMiddleware.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"interfaces/Preparation.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"interfaces/Rank.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":267,"title":{},"body":{"injectables/DistancePipe.html":{},"injectables/LoggerService.html":{},"injectables/RankingService.html":{},"coverage.html":{}}}],["0.1.12",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":846,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":842,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":843,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":862,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":34,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/DateUnitPipe.html":{},"injectables/LoggerService.html":{},"injectables/PreparationTypePipe.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{}}}],["1.3.0",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":848,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":841,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":419,"title":{},"body":{"injectables/HospitalsService.html":{},"coverage.html":{}}}],["1000",{"_index":420,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["13",{"_index":960,"title":{},"body":{"overview.html":{}}}],["14.3.1",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":962,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["2.24.0",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["2.6.2",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":859,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":845,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":961,"title":{},"body":{"overview.html":{}}}],["3.0.1",{"_index":894,"title":{},"body":{"dependencies.html":{}}}],["3.16.0",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["3.8.0",{"_index":892,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":959,"title":{},"body":{"overview.html":{}}}],["4/5",{"_index":861,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":182,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["5.2.2",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["5.3.1",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["5.4.0",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["5.4.8",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":857,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":840,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":200,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["6",{"_index":958,"title":{},"body":{"overview.html":{}}}],["6.2.0",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["6.2.2",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":858,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":860,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":856,"title":{},"body":{"coverage.html":{}}}],["_id",{"_index":425,"title":{},"body":{"injectables/HospitalsService.html":{},"interfaces/Preparation.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{}}}],["accord",{"_index":310,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{}}}],["according",{"_index":647,"title":{},"body":{"injectables/RankingService.html":{}}}],["addpreparation",{"_index":544,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["addpreparation(preparationid",{"_index":547,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["adminguard",{"_index":1,"title":{"guards/AdminGuard.html":{}},"body":{"guards/AdminGuard.html":{},"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"coverage.html":{}}}],["algorithm",{"_index":190,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"injectables/RankingService.html":{}}}],["aliases",{"_index":964,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":938,"title":{},"body":{"index.html":{}}}],["angular",{"_index":911,"title":{},"body":{"index.html":{}}}],["app",{"_index":484,"title":{},"body":{"injectables/LoggerService.html":{},"index.html":{}}}],["app_guard",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{}}}],["application/json",{"_index":826,"title":{},"body":{"injectables/UserService.html":{}}}],["applications",{"_index":908,"title":{},"body":{"index.html":{}}}],["apply",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":39,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":246,"title":{},"body":{"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"injectables/LatitudinePipe.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{}}}],["array",{"_index":703,"title":{},"body":{"injectables/RankingService.html":{}}}],["article",{"_index":648,"title":{},"body":{"injectables/RankingService.html":{}}}],["associated",{"_index":330,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"controllers/UserController.html":{}}}],["associates",{"_index":505,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["async",{"_index":298,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"controllers/UserController.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{}}}],["attacker",{"_index":765,"title":{},"body":{"guards/UserGuard.html":{}}}],["audience",{"_index":186,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"injectables/UserService.html":{}}}],["auth/guards/admin.guard",{"_index":344,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{}}}],["auth0",{"_index":178,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"guards/UserGuard.html":{}}}],["authenicationmiddleware",{"_index":513,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["authentication",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["authenticationmiddleware",{"_index":73,"title":{"injectables/AuthenticationMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthenticationMiddleware.html":{},"coverage.html":{}}}],["authid",{"_index":742,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["authmodule",{"_index":49,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":946,"title":{},"body":{"index.html":{}}}],["average",{"_index":589,"title":{},"body":{"controllers/RankingController.html":{},"injectables/RankingService.html":{}}}],["averageranks",{"_index":274,"title":{},"body":{"interfaces/Hospital.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":361,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"controllers/UserController.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{}}}],["b",{"_index":713,"title":{},"body":{"injectables/RankingService.html":{}}}],["backers",{"_index":939,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":249,"title":{},"body":{"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"injectables/LatitudinePipe.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{}}}],["badrequestexception(`bad",{"_index":292,"title":{},"body":{"injectables/HospitalIdPipe.html":{}}}],["bash",{"_index":915,"title":{},"body":{"index.html":{}}}],["beautifydate.beautify(date.now",{"_index":485,"title":{},"body":{"injectables/LoggerService.html":{}}}],["becase",{"_index":767,"title":{},"body":{"guards/UserGuard.html":{}}}],["better",{"_index":658,"title":{},"body":{"injectables/RankingService.html":{}}}],["bg",{"_index":434,"title":{},"body":{"injectables/LoggerService.html":{}}}],["body",{"_index":337,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{}}}],["boolean",{"_index":21,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/LoggerService.html":{}}}],["boolean(process.env.details",{"_index":477,"title":{},"body":{"injectables/LoggerService.html":{}}}],["bootstrap",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":674,"title":{},"body":{"injectables/RankingService.html":{}}}],["browse",{"_index":956,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":954,"title":{},"body":{"modules.html":{}}}],["buccal",{"_index":1003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":903,"title":{},"body":{"index.html":{}}}],["cache",{"_index":179,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["calculate",{"_index":686,"title":{},"body":{"injectables/RankingService.html":{}}}],["canactivate",{"_index":9,"title":{},"body":{"guards/AdminGuard.html":{},"guards/UserGuard.html":{}}}],["canactivate(context",{"_index":10,"title":{},"body":{"guards/AdminGuard.html":{},"guards/UserGuard.html":{}}}],["capsules",{"_index":995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["case",{"_index":670,"title":{},"body":{"injectables/RankingService.html":{}}}],["change",{"_index":766,"title":{},"body":{"guards/UserGuard.html":{}}}],["check",{"_index":167,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["checking",{"_index":195,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["checks",{"_index":758,"title":{},"body":{"guards/UserGuard.html":{}}}],["circle",{"_index":322,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["class",{"_index":26,"title":{"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"classes/UserDto.html":{}},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthenticationMiddleware.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classdesc",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthenticationMiddleware.html":{},"injectables/LoggerService.html":{},"guards/UserGuard.html":{}}}],["classes",{"_index":214,"title":{},"body":{"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"classes/UserDto.html":{},"overview.html":{}}}],["client",{"_index":515,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["client_credentials",{"_index":823,"title":{},"body":{"injectables/UserService.html":{}}}],["client_id",{"_index":817,"title":{},"body":{"injectables/UserService.html":{}}}],["client_secret",{"_index":819,"title":{},"body":{"injectables/UserService.html":{}}}],["cluster_appmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_imports",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_hospitalsmodule",{"_index":373,"title":{},"body":{"modules/HospitalsModule.html":{},"overview.html":{}}}],["cluster_hospitalsmodule_imports",{"_index":374,"title":{},"body":{"modules/HospitalsModule.html":{}}}],["cluster_hospitalsmodule_providers",{"_index":375,"title":{},"body":{"modules/HospitalsModule.html":{},"overview.html":{}}}],["cluster_preparationsmodule",{"_index":537,"title":{},"body":{"modules/PreparationsModule.html":{},"overview.html":{}}}],["cluster_preparationsmodule_imports",{"_index":538,"title":{},"body":{"modules/PreparationsModule.html":{}}}],["cluster_preparationsmodule_providers",{"_index":539,"title":{},"body":{"modules/PreparationsModule.html":{},"overview.html":{}}}],["cluster_rankingmodule",{"_index":620,"title":{},"body":{"modules/RankingModule.html":{},"overview.html":{}}}],["cluster_rankingmodule_imports",{"_index":621,"title":{},"body":{"modules/RankingModule.html":{}}}],["cluster_rankingmodule_providers",{"_index":622,"title":{},"body":{"modules/RankingModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":772,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":773,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":774,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["collection",{"_index":662,"title":{},"body":{"injectables/RankingService.html":{},"guards/UserGuard.html":{}}}],["collections",{"_index":668,"title":{},"body":{"injectables/RankingService.html":{}}}],["compression",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":453,"title":{},"body":{"injectables/LoggerService.html":{}}}],["configure",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["console",{"_index":480,"title":{},"body":{"injectables/LoggerService.html":{}}}],["console.log",{"_index":481,"title":{},"body":{"injectables/LoggerService.html":{}}}],["console.log(date.now",{"_index":719,"title":{},"body":{"injectables/RankingService.html":{}}}],["const",{"_index":28,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"injectables/AuthenticationMiddleware.html":{},"injectables/HospitalsService.html":{},"injectables/LoggerService.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{}}}],["constructor",{"_index":356,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"injectables/LoggerService.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{}}}],["constructor(hospitalmodel",{"_index":392,"title":{},"body":{"injectables/HospitalsService.html":{},"injectables/PreparationsService.html":{}}}],["constructor(preparationmodel",{"_index":631,"title":{},"body":{"injectables/RankingService.html":{}}}],["constructor(private",{"_index":749,"title":{},"body":{"controllers/UserController.html":{},"guards/UserGuard.html":{}}}],["constructor(user",{"_index":787,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":755,"title":{},"body":{"guards/UserGuard.html":{}}}],["consumer",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(authenticationmiddleware).forroutes",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["contains",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/UserGuard.html":{}}}],["content",{"_index":825,"title":{},"body":{"injectables/UserService.html":{}}}],["context",{"_index":19,"title":{},"body":{"guards/AdminGuard.html":{},"guards/UserGuard.html":{}}}],["context.getargs()[0].user.sub",{"_index":763,"title":{},"body":{"guards/UserGuard.html":{}}}],["context.getargs()[0].user['http://localhost:3000/roles",{"_index":31,"title":{},"body":{"guards/AdminGuard.html":{}}}],["controller",{"_index":293,"title":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"controllers/UserController.html":{}},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('hospitals",{"_index":355,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["controller('preparations",{"_index":523,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["controller('ranking",{"_index":611,"title":{},"body":{"controllers/RankingController.html":{}}}],["controller('user",{"_index":748,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coordinate",{"_index":275,"title":{},"body":{"interfaces/Hospital.html":{}}}],["coordinates",{"_index":217,"title":{},"body":{"classes/CreateHospitalDto.html":{},"interfaces/GeoJSONMultiPoint.html":{},"injectables/HospitalsService.html":{},"miscellaneous/variables.html":{}}}],["core",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["cors",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":830,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":390,"title":{},"body":{"injectables/HospitalsService.html":{},"injectables/PreparationsService.html":{}}}],["create(createhospitaldto",{"_index":396,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["create(createpreparationdto",{"_index":550,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["createhospital",{"_index":299,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["createhospital(@body",{"_index":360,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["createhospital(hosp",{"_index":304,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["createhospitaldto",{"_index":213,"title":{"classes/CreateHospitalDto.html":{}},"body":{"classes/CreateHospitalDto.html":{},"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"coverage.html":{}}}],["createparamdecorator((data",{"_index":1005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpreparation",{"_index":501,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["createpreparation(@body",{"_index":524,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["createpreparation(prep",{"_index":503,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["createpreparationdto",{"_index":226,"title":{"classes/CreatePreparationDto.html":{}},"body":{"classes/CreatePreparationDto.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"coverage.html":{}}}],["creates",{"_index":307,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{}}}],["creating",{"_index":470,"title":{},"body":{"injectables/LoggerService.html":{}}}],["currentcolor",{"_index":435,"title":{},"body":{"injectables/LoggerService.html":{}}}],["database",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":228,"title":{},"body":{"classes/CreatePreparationDto.html":{},"injectables/DateUnitPipe.html":{},"interfaces/Preparation.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"interfaces/Rank.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"miscellaneous/variables.html":{}}}],["date(date.now",{"_index":716,"title":{},"body":{"injectables/RankingService.html":{}}}],["date(value",{"_index":254,"title":{},"body":{"injectables/DatePipe.html":{}}}],["date.now",{"_index":688,"title":{},"body":{"injectables/RankingService.html":{}}}],["datepipe",{"_index":241,"title":{"injectables/DatePipe.html":{}},"body":{"injectables/DatePipe.html":{},"controllers/PreparationsController.html":{},"coverage.html":{}}}],["dateunit",{"_index":260,"title":{},"body":{"injectables/DateUnitPipe.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"miscellaneous/typealiases.html":{}}}],["dateunitpipe",{"_index":256,"title":{"injectables/DateUnitPipe.html":{}},"body":{"injectables/DateUnitPipe.html":{},"controllers/RankingController.html":{},"coverage.html":{}}}],["dateunitsarray",{"_index":261,"title":{},"body":{"injectables/DateUnitPipe.html":{},"injectables/RankingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dateunitsarray.indexof(value",{"_index":263,"title":{},"body":{"injectables/DateUnitPipe.html":{}}}],["day",{"_index":590,"title":{},"body":{"controllers/RankingController.html":{},"injectables/RankingService.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["decided",{"_index":652,"title":{},"body":{"injectables/RankingService.html":{}}}],["declarations",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decode",{"_index":802,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["decorators",{"_index":231,"title":{},"body":{"classes/CreatePreparationDto.html":{},"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":145,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/RankingService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"injectables/AuthenticationMiddleware.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":41,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecation",{"_index":559,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["description",{"_index":284,"title":{},"body":{"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"controllers/UserController.html":{},"index.html":{}}}],["development",{"_index":919,"title":{},"body":{"index.html":{}}}],["development'}.env",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["distance",{"_index":313,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{}}}],["distancepipe",{"_index":264,"title":{"injectables/DistancePipe.html":{}},"body":{"injectables/DistancePipe.html":{},"controllers/HospitalsController.html":{},"coverage.html":{}}}],["divide",{"_index":727,"title":{},"body":{"injectables/RankingService.html":{}}}],["document",{"_index":271,"title":{},"body":{"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"interfaces/Preparation.html":{},"interfaces/Rank.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{}}}],["documentation",{"_index":831,"title":{},"body":{"coverage.html":{}}}],["domain",{"_index":141,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["don't",{"_index":975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dotenv",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["dotenv.parse",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["drops",{"_index":999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":928,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":904,"title":{},"body":{"index.html":{}}}],["embedded",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enables",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{}}}],["end",{"_index":509,"title":{},"body":{"controllers/PreparationsController.html":{},"injectables/RankingService.html":{}}}],["end.diff(start",{"_index":728,"title":{},"body":{"injectables/RankingService.html":{}}}],["end.todate",{"_index":722,"title":{},"body":{"injectables/RankingService.html":{}}}],["ending",{"_index":516,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["endof('day",{"_index":572,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["endpoint",{"_index":165,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["enum",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":192,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"injectables/HospitalsService.html":{}}}],["err.message",{"_index":201,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["err.status",{"_index":199,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["error",{"_index":194,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["error(`'${dateunit",{"_index":679,"title":{},"body":{"injectables/RankingService.html":{}}}],["errors",{"_index":207,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["even",{"_index":286,"title":{},"body":{"injectables/HospitalIdPipe.html":{},"injectables/RankingService.html":{}}}],["example",{"_index":138,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"injectables/LoggerService.html":{},"guards/UserGuard.html":{}}}],["exec",{"_index":412,"title":{},"body":{"injectables/HospitalsService.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{},"injectables/UserService.html":{}}}],["exec()).averageranks.find(r",{"_index":683,"title":{},"body":{"injectables/RankingService.html":{}}}],["exec()).hospital",{"_index":810,"title":{},"body":{"injectables/UserService.html":{}}}],["exec()).preparations",{"_index":575,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["executioncontext",{"_index":11,"title":{},"body":{"guards/AdminGuard.html":{},"guards/UserGuard.html":{}}}],["exist",{"_index":469,"title":{},"body":{"injectables/LoggerService.html":{}}}],["exists",{"_index":760,"title":{},"body":{"guards/UserGuard.html":{}}}],["export",{"_index":25,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthenticationMiddleware.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"interfaces/Preparation.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"interfaces/Rank.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exported",{"_index":762,"title":{},"body":{"guards/UserGuard.html":{}}}],["exports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":155,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"controllers/PreparationsController.html":{},"dependencies.html":{}}}],["expressjwtsecret",{"_index":166,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["extends",{"_index":270,"title":{},"body":{"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"interfaces/Preparation.html":{},"interfaces/Rank.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{}}}],["false",{"_index":426,"title":{},"body":{"injectables/HospitalsService.html":{},"injectables/PreparationsService.html":{},"miscellaneous/variables.html":{}}}],["fgcolors",{"_index":455,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fgcolors.length",{"_index":475,"title":{},"body":{"injectables/LoggerService.html":{}}}],["fgcolors[this.currentcolor",{"_index":473,"title":{},"body":{"injectables/LoggerService.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthenticationMiddleware.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"interfaces/Preparation.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"interfaces/Rank.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["find",{"_index":300,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{}}}],["find(latitude",{"_index":398,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["find(longitude",{"_index":311,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["findall",{"_index":301,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{}}}],["findbyid((await",{"_index":812,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(hospitalid",{"_index":565,"title":{},"body":{"injectables/PreparationsService.html":{},"injectables/RankingService.html":{}}}],["findbyidandupdate(hospitalid",{"_index":561,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["findbyidandupdate(types.objectid(hospitalentry[0",{"_index":718,"title":{},"body":{"injectables/RankingService.html":{}}}],["findone",{"_index":808,"title":{},"body":{"injectables/UserService.html":{}}}],["foreignfield",{"_index":736,"title":{},"body":{"injectables/RankingService.html":{}}}],["forfeature",{"_index":382,"title":{},"body":{"modules/HospitalsModule.html":{}}}],["framework",{"_index":902,"title":{},"body":{"index.html":{}}}],["fs",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["fs.readfilesync(`${process.env.node_env",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["function",{"_index":172,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"injectables/LoggerService.html":{},"coverage.html":{}}}],["functions",{"_index":896,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["geojsonmultipoint",{"_index":219,"title":{"interfaces/GeoJSONMultiPoint.html":{}},"body":{"classes/CreateHospitalDto.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"coverage.html":{}}}],["geojsonmultipoint.interface",{"_index":279,"title":{},"body":{"interfaces/Hospital.html":{}}}],["geojsonmultipointschema",{"_index":850,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["geometry",{"_index":414,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["get('/:type",{"_index":510,"title":{},"body":{"controllers/PreparationsController.html":{},"controllers/RankingController.html":{}}}],["get('/:type/:hospitalid",{"_index":618,"title":{},"body":{"controllers/RankingController.html":{}}}],["get('/:type/me",{"_index":598,"title":{},"body":{"controllers/RankingController.html":{}}}],["get('/linkedintoken",{"_index":745,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/location",{"_index":314,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["get('/myhospital",{"_index":328,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["get('/preparationstypes",{"_index":333,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["get('position/:hospitalid",{"_index":587,"title":{},"body":{"controllers/RankingController.html":{}}}],["get()@useguards(new",{"_index":324,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["get(dateunit",{"_index":694,"title":{},"body":{"injectables/RankingService.html":{}}}],["get(rankingentry._id.tohexstring",{"_index":693,"title":{},"body":{"injectables/RankingService.html":{}}}],["getaveragerank",{"_index":629,"title":{},"body":{"injectables/RankingService.html":{}}}],["getaveragerank(dateunit",{"_index":634,"title":{},"body":{"injectables/RankingService.html":{}}}],["gethospital",{"_index":302,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/UserController.html":{}}}],["gethospital(@user",{"_index":371,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/UserController.html":{}}}],["gethospital(user",{"_index":326,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/UserController.html":{}}}],["gethospitalid",{"_index":782,"title":{},"body":{"injectables/UserService.html":{}}}],["gethospitalid(pauthid",{"_index":790,"title":{},"body":{"injectables/UserService.html":{}}}],["getlinkedintoken",{"_index":783,"title":{},"body":{"injectables/UserService.html":{}}}],["getlinkedintoken(authid",{"_index":793,"title":{},"body":{"injectables/UserService.html":{}}}],["getmanagementtoken",{"_index":784,"title":{},"body":{"injectables/UserService.html":{}}}],["getpreparations",{"_index":545,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["getpreparations(hospitalid",{"_index":552,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["getpreparationstypes",{"_index":391,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["getpreparationstypes(hospitalid",{"_index":402,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["getpreparationtypes",{"_index":303,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["getpreparationtypes(@user",{"_index":368,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["getpreparationtypes(user",{"_index":332,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["getprepration",{"_index":502,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["getprepration(user",{"_index":507,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["getrank",{"_index":582,"title":{},"body":{"controllers/RankingController.html":{}}}],["getrank(hospitalid",{"_index":586,"title":{},"body":{"controllers/RankingController.html":{}}}],["getranksquery",{"_index":630,"title":{},"body":{"injectables/RankingService.html":{}}}],["getranksquery(start",{"_index":636,"title":{},"body":{"injectables/RankingService.html":{}}}],["getting",{"_index":898,"title":{"index.html":{}},"body":{}}],["gettyperank",{"_index":583,"title":{},"body":{"controllers/RankingController.html":{},"injectables/RankingService.html":{}}}],["gettyperank(ptype",{"_index":639,"title":{},"body":{"injectables/RankingService.html":{}}}],["gettyperank(type",{"_index":593,"title":{},"body":{"controllers/RankingController.html":{}}}],["gettyperankhospital",{"_index":584,"title":{},"body":{"controllers/RankingController.html":{}}}],["gettyperankhospital(type",{"_index":597,"title":{},"body":{"controllers/RankingController.html":{}}}],["getuser",{"_index":785,"title":{},"body":{"injectables/UserService.html":{}}}],["getuser(authid",{"_index":796,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserhospital",{"_index":786,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserhospital(authid",{"_index":798,"title":{},"body":{"injectables/UserService.html":{}}}],["global",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["goes",{"_index":210,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["gotten",{"_index":331,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/RankingController.html":{},"controllers/UserController.html":{}}}],["grant_type",{"_index":822,"title":{},"body":{"injectables/UserService.html":{}}}],["group",{"_index":424,"title":{},"body":{"injectables/HospitalsService.html":{},"injectables/RankingService.html":{}}}],["grow",{"_index":935,"title":{},"body":{"index.html":{}}}],["grows",{"_index":984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gte",{"_index":568,"title":{},"body":{"injectables/PreparationsService.html":{},"injectables/RankingService.html":{}}}],["guarantees",{"_index":769,"title":{},"body":{"guards/UserGuard.html":{}}}],["guard",{"_index":0,"title":{"guards/AdminGuard.html":{},"guards/UserGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"guards/UserGuard.html":{},"overview.html":{}}}],["guards/user.guard",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{}}}],["headers",{"_index":824,"title":{},"body":{"injectables/UserService.html":{}}}],["heavily",{"_index":909,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthenticationMiddleware.html":{},"index.html":{}}}],["hosp",{"_index":308,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["hospid",{"_index":729,"title":{},"body":{"injectables/RankingService.html":{}}}],["hospital",{"_index":229,"title":{"interfaces/Hospital.html":{}},"body":{"classes/CreatePreparationDto.html":{},"interfaces/Hospital.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"interfaces/Preparation.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hospital's",{"_index":805,"title":{},"body":{"injectables/UserService.html":{}}}],["hospital.dto",{"_index":345,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{}}}],["hospital.dto.ts",{"_index":216,"title":{},"body":{"classes/CreateHospitalDto.html":{},"coverage.html":{}}}],["hospital.dto.ts:5",{"_index":221,"title":{},"body":{"classes/CreateHospitalDto.html":{}}}],["hospital.dto.ts:6",{"_index":220,"title":{},"body":{"classes/CreateHospitalDto.html":{}}}],["hospital.dto.ts:7",{"_index":223,"title":{},"body":{"classes/CreateHospitalDto.html":{}}}],["hospital.interface",{"_index":491,"title":{},"body":{"interfaces/Preparation.html":{},"interfaces/User.html":{}}}],["hospitalentry",{"_index":701,"title":{},"body":{"injectables/RankingService.html":{}}}],["hospitalentry[1",{"_index":705,"title":{},"body":{"injectables/RankingService.html":{}}}],["hospitalid",{"_index":404,"title":{},"body":{"injectables/HospitalsService.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"interfaces/User.html":{}}}],["hospitalidpipe",{"_index":281,"title":{"injectables/HospitalIdPipe.html":{}},"body":{"injectables/HospitalIdPipe.html":{},"controllers/RankingController.html":{},"coverage.html":{}}}],["hospitalmodel",{"_index":395,"title":{},"body":{"injectables/HospitalsService.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{}}}],["hospitals",{"_index":297,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{}}}],["hospitals.controller",{"_index":377,"title":{},"body":{"modules/HospitalsModule.html":{}}}],["hospitals.hospid",{"_index":735,"title":{},"body":{"injectables/RankingService.html":{}}}],["hospitals.hospname",{"_index":737,"title":{},"body":{"injectables/RankingService.html":{}}}],["hospitals.hospname.name",{"_index":738,"title":{},"body":{"injectables/RankingService.html":{}}}],["hospitals.media",{"_index":739,"title":{},"body":{"injectables/RankingService.html":{}}}],["hospitals.service",{"_index":342,"title":{},"body":{"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{}}}],["hospitals/hospitals.service",{"_index":627,"title":{},"body":{"modules/RankingModule.html":{}}}],["hospitalschema",{"_index":380,"title":{},"body":{"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hospitalscontroller",{"_index":294,"title":{"controllers/HospitalsController.html":{}},"body":{"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"coverage.html":{}}}],["hospitalsmap",{"_index":687,"title":{},"body":{"injectables/RankingService.html":{}}}],["hospitalsmap.get(rankingentry._id.tohexstring()).has(dateunit",{"_index":692,"title":{},"body":{"injectables/RankingService.html":{}}}],["hospitalsmap.has(rankingentry._id.tohexstring",{"_index":691,"title":{},"body":{"injectables/RankingService.html":{}}}],["hospitalsmap.set",{"_index":698,"title":{},"body":{"injectables/RankingService.html":{}}}],["hospitalsmodule",{"_index":50,"title":{"modules/HospitalsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HospitalsModule.html":{},"modules.html":{},"overview.html":{}}}],["hospitalsservice",{"_index":341,"title":{"injectables/HospitalsService.html":{}},"body":{"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"modules/RankingModule.html":{},"coverage.html":{},"overview.html":{}}}],["hosptial",{"_index":534,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["http://localhost:3000",{"_index":187,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["httpmodule",{"_index":776,"title":{},"body":{"modules/UserModule.html":{}}}],["https://${process.env.auth0_domain}/oauth/token",{"_index":816,"title":{},"body":{"injectables/UserService.html":{}}}],["https://${this.domain",{"_index":189,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["https://${this.domain}/.well",{"_index":184,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["https://jkchu.com/2016/02/17/designing",{"_index":649,"title":{},"body":{"injectables/RankingService.html":{}}}],["https://nestjs.com",{"_index":950,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":788,"title":{},"body":{"injectables/UserService.html":{}}}],["i've",{"_index":651,"title":{},"body":{"injectables/RankingService.html":{}}}],["id",{"_index":592,"title":{},"body":{"controllers/RankingController.html":{},"interfaces/TypeRank.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{}}}],["id.pipe",{"_index":610,"title":{},"body":{"controllers/RankingController.html":{}}}],["id.pipe.ts",{"_index":283,"title":{},"body":{"injectables/HospitalIdPipe.html":{},"coverage.html":{}}}],["id.pipe.ts:14",{"_index":289,"title":{},"body":{"injectables/HospitalIdPipe.html":{}}}],["identifier",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["impact",{"_index":655,"title":{},"body":{"injectables/RankingService.html":{}}}],["implants",{"_index":1002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implement",{"_index":653,"title":{},"body":{"injectables/RankingService.html":{}}}],["implementing",{"_index":650,"title":{},"body":{"injectables/RankingService.html":{}}}],["implements",{"_index":27,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"injectables/AuthenticationMiddleware.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"injectables/LatitudinePipe.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{},"guards/UserGuard.html":{}}}],["import",{"_index":22,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthenticationMiddleware.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"interfaces/Preparation.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"interfaces/Rank.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["important",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{}}}],["imported",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{}}}],["importing",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{}}}],["includearrayindex",{"_index":732,"title":{},"body":{"injectables/RankingService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"guards/AdminGuard.html":{},"injectables/AuthenticationMiddleware.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"interfaces/Preparation.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"interfaces/Rank.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthenticationMiddleware.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"interfaces/Preparation.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"interfaces/Rank.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["information",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["inhalers",{"_index":1000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":555,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["injectable",{"_index":23,"title":{"injectables/AuthenticationMiddleware.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{},"injectables/UserService.html":{}},"body":{"guards/AdminGuard.html":{},"injectables/AuthenticationMiddleware.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":136,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injections",{"_index":1001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectmodel",{"_index":405,"title":{},"body":{"injectables/HospitalsService.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{},"injectables/UserService.html":{}}}],["injectmodel('hospital",{"_index":407,"title":{},"body":{"injectables/HospitalsService.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{}}}],["injectmodel('preparation",{"_index":408,"title":{},"body":{"injectables/HospitalsService.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{}}}],["injectmodel('rank",{"_index":646,"title":{},"body":{"injectables/RankingService.html":{}}}],["injectmodel('user",{"_index":804,"title":{},"body":{"injectables/UserService.html":{}}}],["inserted",{"_index":512,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["inspired",{"_index":910,"title":{},"body":{"index.html":{}}}],["install",{"_index":917,"title":{},"body":{"index.html":{}}}],["installation",{"_index":914,"title":{},"body":{"index.html":{}}}],["instead",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LoggerService.html":{}}}],["integrity",{"_index":770,"title":{},"body":{"guards/UserGuard.html":{}}}],["interface",{"_index":171,"title":{"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"interfaces/Preparation.html":{},"interfaces/Rank.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{}},"body":{"injectables/AuthenticationMiddleware.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"interfaces/Preparation.html":{},"interfaces/Rank.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["interfaces",{"_index":268,"title":{},"body":{"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"interfaces/Preparation.html":{},"interfaces/Rank.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"overview.html":{}}}],["interfaces/geojsonmultipoint.interface",{"_index":225,"title":{},"body":{"classes/CreateHospitalDto.html":{}}}],["isdatestring",{"_index":232,"title":{},"body":{"classes/CreatePreparationDto.html":{}}}],["issuer",{"_index":188,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["it's",{"_index":287,"title":{},"body":{"injectables/HospitalIdPipe.html":{}}}],["joi",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":941,"title":{},"body":{"index.html":{}}}],["json",{"_index":162,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["jsonwebtokens",{"_index":151,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["jwks",{"_index":161,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"dependencies.html":{}}}],["jwksrequestsperminute",{"_index":181,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["jwksuri",{"_index":183,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["jwt",{"_index":154,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"controllers/PreparationsController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["jwtdecode",{"_index":801,"title":{},"body":{"injectables/UserService.html":{}}}],["jwtdecode(this.managementtoken).exp",{"_index":829,"title":{},"body":{"injectables/UserService.html":{}}}],["kamil",{"_index":947,"title":{},"body":{"index.html":{}}}],["key",{"_index":164,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["keys",{"_index":160,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["kilomiters",{"_index":415,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["known",{"_index":498,"title":{},"body":{"injectables/PreparationTypePipe.html":{}}}],["known/jwks.json",{"_index":185,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["lastupdate",{"_index":577,"title":{},"body":{"interfaces/Rank.html":{},"miscellaneous/variables.html":{}}}],["lat",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["latitude",{"_index":312,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{}}}],["latitudinepipe",{"_index":352,"title":{"injectables/LatitudinePipe.html":{}},"body":{"controllers/HospitalsController.html":{},"injectables/LatitudinePipe.html":{},"coverage.html":{}}}],["legend",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["library",{"_index":156,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["license",{"_index":953,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":933,"title":{},"body":{"index.html":{}}}],["line",{"_index":479,"title":{},"body":{"injectables/LoggerService.html":{}}}],["liquid",{"_index":993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":335,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["localfield",{"_index":734,"title":{},"body":{"injectables/RankingService.html":{}}}],["location",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location.type",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":438,"title":{},"body":{"injectables/LoggerService.html":{}}}],["log(namespace",{"_index":441,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logged",{"_index":759,"title":{},"body":{"guards/UserGuard.html":{}}}],["logger",{"_index":471,"title":{},"body":{"injectables/LoggerService.html":{}}}],["loggers",{"_index":436,"title":{},"body":{"injectables/LoggerService.html":{}}}],["loggerservice",{"_index":432,"title":{"injectables/LoggerService.html":{}},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["logging",{"_index":462,"title":{},"body":{"injectables/LoggerService.html":{}}}],["long",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longitude",{"_index":318,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{}}}],["longitudinepipe",{"_index":350,"title":{"injectables/LongitudinePipe.html":{}},"body":{"controllers/HospitalsController.html":{},"injectables/LongitudinePipe.html":{},"coverage.html":{}}}],["lookup",{"_index":733,"title":{},"body":{"injectables/RankingService.html":{}}}],["low",{"_index":654,"title":{},"body":{"injectables/RankingService.html":{}}}],["lt",{"_index":570,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["lte",{"_index":721,"title":{},"body":{"injectables/RankingService.html":{}}}],["made",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["main",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["makes",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{}}}],["managementtoken",{"_index":781,"title":{},"body":{"injectables/UserService.html":{}}}],["manager",{"_index":465,"title":{},"body":{"injectables/LoggerService.html":{}}}],["map",{"_index":450,"title":{},"body":{"injectables/LoggerService.html":{},"injectables/RankingService.html":{}}}],["map([[dateunit",{"_index":700,"title":{},"body":{"injectables/RankingService.html":{}}}],["match",{"_index":423,"title":{},"body":{"injectables/HospitalsService.html":{},"injectables/RankingService.html":{}}}],["matching",{"_index":36,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthenticationMiddleware.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"interfaces/Preparation.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"interfaces/Rank.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.abs(value",{"_index":431,"title":{},"body":{"injectables/LatitudinePipe.html":{},"injectables/LongitudinePipe.html":{}}}],["math.ceil",{"_index":711,"title":{},"body":{"injectables/RankingService.html":{}}}],["maxdistance",{"_index":416,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["media",{"_index":726,"title":{},"body":{"injectables/RankingService.html":{},"interfaces/TypeRank.html":{}}}],["medicines",{"_index":997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":196,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"injectables/LoggerService.html":{}}}],["metadata",{"_index":245,"title":{},"body":{"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"injectables/LatitudinePipe.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{},"dependencies.html":{}}}],["meters",{"_index":418,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["method",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{}}}],["methods",{"_index":8,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"injectables/AuthenticationMiddleware.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"controllers/UserController.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{}}}],["middleware",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationMiddleware.html":{}}}],["middleware/authentication.middleware",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewareconsumer",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewarefunction",{"_index":144,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["miscellaneous",{"_index":895,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":932,"title":{},"body":{"index.html":{}}}],["mode",{"_index":922,"title":{},"body":{"index.html":{}}}],["model",{"_index":386,"title":{},"body":{"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{},"injectables/UserService.html":{}}}],["module",{"_index":38,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":40,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/config/config.module",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/config/config.service",{"_index":454,"title":{},"body":{"injectables/LoggerService.html":{}}}],["modules/hospitals/hospitals.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/preparations/preparations.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/ranking/ranking.module",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["moment",{"_index":250,"title":{},"body":{"injectables/DatePipe.html":{},"injectables/LoggerService.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{},"dependencies.html":{}}}],["moment(date.now()).endof('day",{"_index":673,"title":{},"body":{"injectables/RankingService.html":{}}}],["moment(date.now()).endof('month",{"_index":676,"title":{},"body":{"injectables/RankingService.html":{}}}],["moment(date.now()).endof('year",{"_index":678,"title":{},"body":{"injectables/RankingService.html":{}}}],["moment(date.now()).startof('day",{"_index":672,"title":{},"body":{"injectables/RankingService.html":{}}}],["moment(date.now()).startof('month",{"_index":675,"title":{},"body":{"injectables/RankingService.html":{}}}],["moment(date.now()).startof('year",{"_index":677,"title":{},"body":{"injectables/RankingService.html":{}}}],["moment(range[0]).startof('day",{"_index":564,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["moment(range[1",{"_index":571,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["moment(value).isvalid",{"_index":252,"title":{},"body":{"injectables/DatePipe.html":{}}}],["moment.moment",{"_index":637,"title":{},"body":{"injectables/RankingService.html":{}}}],["mongoose",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"injectables/HospitalIdPipe.html":{},"injectables/HospitalsService.html":{},"interfaces/Preparation.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"interfaces/Rank.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoose.schema",{"_index":974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose.schema.types.objectid",{"_index":987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":388,"title":{},"body":{"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot(process.env.database",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["month",{"_index":600,"title":{},"body":{"controllers/RankingController.html":{},"injectables/RankingService.html":{},"miscellaneous/variables.html":{}}}],["more",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["moreover",{"_index":211,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["multipoint",{"_index":272,"title":{},"body":{"interfaces/GeoJSONMultiPoint.html":{},"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":948,"title":{},"body":{"index.html":{}}}],["name",{"_index":16,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"classes/CreateHospitalDto.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"interfaces/Hospital.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"controllers/UserController.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["namespace",{"_index":443,"title":{},"body":{"injectables/LoggerService.html":{}}}],["nearsphere",{"_index":413,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["need",{"_index":991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nest",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["nestframework",{"_index":952,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":24,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthenticationMiddleware.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"controllers/UserController.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":149,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["nestmiddleware's",{"_index":170,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["nestmodule",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["never",{"_index":1006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":253,"title":{},"body":{"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"injectables/LoggerService.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newprep",{"_index":525,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["newprep._id",{"_index":529,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["newprep.hospital",{"_index":528,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["next",{"_index":175,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"injectables/LoggerService.html":{}}}],["node.js",{"_index":901,"title":{},"body":{"index.html":{}}}],["note",{"_index":764,"title":{},"body":{"guards/UserGuard.html":{}}}],["now",{"_index":563,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["now.todate",{"_index":569,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["npm",{"_index":916,"title":{},"body":{"index.html":{}}}],["null",{"_index":591,"title":{},"body":{"controllers/RankingController.html":{},"injectables/RankingService.html":{}}}],["number",{"_index":235,"title":{},"body":{"classes/CreatePreparationDto.html":{},"interfaces/GeoJSONMultiPoint.html":{},"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"injectables/LoggerService.html":{},"interfaces/Preparation.html":{},"interfaces/Rank.html":{},"interfaces/TypeRank.html":{},"miscellaneous/variables.html":{}}}],["numberofpreparations",{"_index":230,"title":{},"body":{"classes/CreatePreparationDto.html":{},"interfaces/Preparation.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":309,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{}}}],["occured",{"_index":208,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["open",{"_index":934,"title":{},"body":{"index.html":{}}}],["optional",{"_index":18,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"controllers/UserController.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{}}}],["out",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":957,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":864,"title":{"dependencies.html":{}},"body":{}}],["pair",{"_index":384,"title":{},"body":{"modules/HospitalsModule.html":{}}}],["param",{"_index":358,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"controllers/UserController.html":{}}}],["param('hospitalid",{"_index":616,"title":{},"body":{"controllers/RankingController.html":{}}}],["param('type",{"_index":530,"title":{},"body":{"controllers/PreparationsController.html":{},"controllers/RankingController.html":{}}}],["parameters",{"_index":14,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"controllers/UserController.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{}}}],["passed",{"_index":316,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/UserService.html":{}}}],["path",{"_index":731,"title":{},"body":{"injectables/RankingService.html":{}}}],["paths",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["pauthid",{"_index":792,"title":{},"body":{"injectables/UserService.html":{}}}],["period",{"_index":578,"title":{},"body":{"interfaces/Rank.html":{},"controllers/RankingController.html":{},"miscellaneous/variables.html":{}}}],["periodvalues",{"_index":704,"title":{},"body":{"injectables/RankingService.html":{}}}],["periodvalues[0",{"_index":709,"title":{},"body":{"injectables/RankingService.html":{}}}],["periodvalues[1].length",{"_index":714,"title":{},"body":{"injectables/RankingService.html":{}}}],["periodvalues[1].reduce((a",{"_index":712,"title":{},"body":{"injectables/RankingService.html":{}}}],["pipeline",{"_index":209,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["pipetransform",{"_index":248,"title":{},"body":{"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"injectables/LatitudinePipe.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{}}}],["please",{"_index":942,"title":{},"body":{"index.html":{}}}],["point",{"_index":320,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"miscellaneous/variables.html":{}}}],["policy",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{}}}],["populate",{"_index":566,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["populate('hospital",{"_index":814,"title":{},"body":{"injectables/UserService.html":{}}}],["populate('preparations",{"_index":411,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["post",{"_index":339,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"injectables/UserService.html":{}}}],["post()@useguards(new",{"_index":305,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{}}}],["prefix",{"_index":296,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"controllers/UserController.html":{}}}],["prep",{"_index":506,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["preparation",{"_index":277,"title":{"interfaces/Preparation.html":{}},"body":{"interfaces/Hospital.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"interfaces/Preparation.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["preparation.dto",{"_index":520,"title":{},"body":{"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{}}}],["preparation.dto.ts",{"_index":227,"title":{},"body":{"classes/CreatePreparationDto.html":{},"coverage.html":{}}}],["preparation.dto.ts:10",{"_index":234,"title":{},"body":{"classes/CreatePreparationDto.html":{}}}],["preparation.dto.ts:6",{"_index":238,"title":{},"body":{"classes/CreatePreparationDto.html":{}}}],["preparation.dto.ts:7",{"_index":236,"title":{},"body":{"classes/CreatePreparationDto.html":{}}}],["preparation.dto.ts:9",{"_index":233,"title":{},"body":{"classes/CreatePreparationDto.html":{}}}],["preparation.interface",{"_index":278,"title":{},"body":{"interfaces/Hospital.html":{}}}],["preparation.module.ts",{"_index":557,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["preparation.type",{"_index":239,"title":{},"body":{"classes/CreatePreparationDto.html":{},"interfaces/Preparation.html":{},"injectables/PreparationTypePipe.html":{}}}],["preparationid",{"_index":549,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["preparationinterface",{"_index":1004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preparationmodel",{"_index":393,"title":{},"body":{"injectables/HospitalsService.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{}}}],["preparations",{"_index":218,"title":{},"body":{"classes/CreateHospitalDto.html":{},"interfaces/Hospital.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{},"miscellaneous/variables.html":{}}}],["preparations.controller",{"_index":541,"title":{},"body":{"modules/PreparationsModule.html":{}}}],["preparations.service",{"_index":518,"title":{},"body":{"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{}}}],["preparationschema",{"_index":378,"title":{},"body":{"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["preparationscontroller",{"_index":499,"title":{"controllers/PreparationsController.html":{}},"body":{"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"coverage.html":{}}}],["preparationsmodule",{"_index":51,"title":{"modules/PreparationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PreparationsModule.html":{},"modules.html":{},"overview.html":{}}}],["preparationsservice",{"_index":517,"title":{"injectables/PreparationsService.html":{}},"body":{"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"coverage.html":{},"overview.html":{}}}],["preparationtype",{"_index":237,"title":{},"body":{"classes/CreatePreparationDto.html":{},"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"interfaces/Preparation.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"miscellaneous/typealiases.html":{}}}],["preparationtypepipe",{"_index":492,"title":{"injectables/PreparationTypePipe.html":{}},"body":{"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"coverage.html":{}}}],["preparationtypesarray",{"_index":496,"title":{},"body":{"injectables/PreparationTypePipe.html":{},"injectables/RankingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["preparationtypesarray.indexof(value",{"_index":497,"title":{},"body":{"injectables/PreparationTypePipe.html":{}}}],["print",{"_index":439,"title":{},"body":{"injectables/LoggerService.html":{}}}],["print(namespace",{"_index":444,"title":{},"body":{"injectables/LoggerService.html":{}}}],["private",{"_index":357,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"injectables/LoggerService.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"injectables/UserService.html":{}}}],["process",{"_index":204,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["process.env.auth0_domain",{"_index":147,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["process.env.auth0_management_aud",{"_index":821,"title":{},"body":{"injectables/UserService.html":{}}}],["process.env.auth0_management_clientid",{"_index":818,"title":{},"body":{"injectables/UserService.html":{}}}],["process.env.auth0_management_secret",{"_index":820,"title":{},"body":{"injectables/UserService.html":{}}}],["produces",{"_index":558,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["production",{"_index":924,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":900,"title":{},"body":{"index.html":{}}}],["project",{"_index":725,"title":{},"body":{"injectables/RankingService.html":{},"index.html":{}}}],["promise",{"_index":323,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{},"controllers/UserController.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":139,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"injectables/LoggerService.html":{},"interfaces/Preparation.html":{},"interfaces/Rank.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["provide",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{}}}],["provided",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["ptype",{"_index":553,"title":{},"body":{"injectables/PreparationsService.html":{},"injectables/RankingService.html":{}}}],["public",{"_index":437,"title":{},"body":{"injectables/LoggerService.html":{}}}],["push",{"_index":427,"title":{},"body":{"injectables/HospitalsService.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{}}}],["push(rankingentry.ranking",{"_index":695,"title":{},"body":{"injectables/RankingService.html":{}}}],["put",{"_index":605,"title":{},"body":{"controllers/RankingController.html":{}}}],["put()@useguards(new",{"_index":602,"title":{},"body":{"controllers/RankingController.html":{}}}],["putting",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["query",{"_index":340,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{}}}],["query('dateunit",{"_index":613,"title":{},"body":{"controllers/RankingController.html":{}}}],["query('distance",{"_index":366,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["query('end",{"_index":532,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["query('latitude",{"_index":365,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["query('longitude",{"_index":364,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["query('start",{"_index":531,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["query.push",{"_index":681,"title":{},"body":{"injectables/RankingService.html":{}}}],["quickly",{"_index":986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["r.period",{"_index":684,"title":{},"body":{"injectables/RankingService.html":{}}}],["radius",{"_index":321,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["range",{"_index":317,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/PreparationsService.html":{}}}],["rank",{"_index":276,"title":{"interfaces/Rank.html":{}},"body":{"interfaces/Hospital.html":{},"interfaces/Rank.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rank._id",{"_index":707,"title":{},"body":{"injectables/RankingService.html":{}}}],["rank.interface",{"_index":280,"title":{},"body":{"interfaces/Hospital.html":{}}}],["rank.interfaces",{"_index":645,"title":{},"body":{"injectables/RankingService.html":{}}}],["rank.interfaces.ts",{"_index":740,"title":{},"body":{"interfaces/TypeRank.html":{},"coverage.html":{}}}],["rank.lastupdate",{"_index":715,"title":{},"body":{"injectables/RankingService.html":{}}}],["rank.period",{"_index":708,"title":{},"body":{"injectables/RankingService.html":{}}}],["rank.rank",{"_index":710,"title":{},"body":{"injectables/RankingService.html":{}}}],["ranking",{"_index":581,"title":{},"body":{"controllers/RankingController.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{}}}],["ranking.controller",{"_index":624,"title":{},"body":{"modules/RankingModule.html":{}}}],["ranking.service",{"_index":607,"title":{},"body":{"controllers/RankingController.html":{},"modules/RankingModule.html":{}}}],["rankingcontroller",{"_index":579,"title":{"controllers/RankingController.html":{}},"body":{"controllers/RankingController.html":{},"modules/RankingModule.html":{},"coverage.html":{}}}],["rankingentry",{"_index":689,"title":{},"body":{"injectables/RankingService.html":{}}}],["rankingentry._id.tohexstring",{"_index":699,"title":{},"body":{"injectables/RankingService.html":{}}}],["rankingentry.ranking",{"_index":697,"title":{},"body":{"injectables/RankingService.html":{}}}],["rankingmodule",{"_index":52,"title":{"modules/RankingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RankingModule.html":{},"modules.html":{},"overview.html":{}}}],["rankingservice",{"_index":606,"title":{"injectables/RankingService.html":{}},"body":{"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"coverage.html":{},"overview.html":{}}}],["rankmodel",{"_index":632,"title":{},"body":{"injectables/RankingService.html":{}}}],["ranks",{"_index":685,"title":{},"body":{"injectables/RankingService.html":{}}}],["rankschema",{"_index":625,"title":{},"body":{"modules/RankingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ratelimit",{"_index":180,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["reacts",{"_index":667,"title":{},"body":{"injectables/RankingService.html":{}}}],["read",{"_index":943,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":140,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"injectables/LoggerService.html":{},"interfaces/Preparation.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{}}}],["reason",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"controllers/PreparationsController.html":{}}}],["record",{"_index":383,"title":{},"body":{"modules/HospitalsModule.html":{}}}],["ref",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["relatively",{"_index":656,"title":{},"body":{"injectables/RankingService.html":{}}}],["repository",{"_index":913,"title":{},"body":{"index.html":{}}}],["req",{"_index":173,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":153,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":205,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"injectables/HospitalIdPipe.html":{}}}],["require('moment",{"_index":251,"title":{},"body":{"injectables/DatePipe.html":{}}}],["required",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":174,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["res.status(status).send",{"_index":206,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["reset",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"injectables/LoggerService.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve",{"_index":142,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["responsable",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["result",{"_index":35,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthenticationMiddleware.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"interfaces/Preparation.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"interfaces/Rank.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":37,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthenticationMiddleware.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"interfaces/Preparation.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"interfaces/Rank.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":157,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["retrive",{"_index":535,"title":{},"body":{"controllers/PreparationsController.html":{},"injectables/RankingService.html":{},"injectables/UserService.html":{}}}],["retrives",{"_index":176,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["return",{"_index":32,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AuthenticationMiddleware.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"injectables/LoggerService.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"controllers/UserController.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":20,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"injectables/AuthenticationMiddleware.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"controllers/UserController.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["routes",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["rs256",{"_index":191,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["rsa",{"_index":158,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"dependencies.html":{}}}],["run",{"_index":920,"title":{},"body":{"index.html":{}}}],["running",{"_index":918,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["scalable",{"_index":905,"title":{},"body":{"index.html":{}}}],["scheduling",{"_index":665,"title":{},"body":{"injectables/RankingService.html":{}}}],["schema",{"_index":387,"title":{},"body":{"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["schema.types.date",{"_index":990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schema.types.number",{"_index":989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schema.types.objectid",{"_index":992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schema.types.string",{"_index":988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":385,"title":{},"body":{"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{}}}],["scoped",{"_index":556,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["secret",{"_index":177,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["select",{"_index":809,"title":{},"body":{"injectables/UserService.html":{}}}],["semplicity",{"_index":657,"title":{},"body":{"injectables/RankingService.html":{}}}],["sent",{"_index":197,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["server",{"_index":906,"title":{},"body":{"index.html":{}}}],["set",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationMiddleware.html":{}}}],["set(dateunit",{"_index":696,"title":{},"body":{"injectables/RankingService.html":{}}}],["setaverageranks",{"_index":585,"title":{},"body":{"controllers/RankingController.html":{},"injectables/RankingService.html":{}}}],["sets",{"_index":152,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{}}}],["setted",{"_index":212,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["side",{"_index":907,"title":{},"body":{"index.html":{}}}],["signature",{"_index":768,"title":{},"body":{"guards/UserGuard.html":{}}}],["signing",{"_index":159,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["simple",{"_index":604,"title":{},"body":{"controllers/RankingController.html":{}}}],["simpler",{"_index":663,"title":{},"body":{"injectables/RankingService.html":{}}}],["single",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{}}}],["sorry",{"_index":202,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["sort",{"_index":574,"title":{},"body":{"injectables/PreparationsService.html":{},"injectables/RankingService.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthenticationMiddleware.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"modules/HospitalsModule.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"interfaces/Preparation.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"modules/PreparationsModule.html":{},"injectables/PreparationsService.html":{},"interfaces/Rank.html":{},"controllers/RankingController.html":{},"modules/RankingModule.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["specific",{"_index":595,"title":{},"body":{"controllers/RankingController.html":{},"interfaces/TypeRank.html":{}}}],["sponsors",{"_index":937,"title":{},"body":{"index.html":{}}}],["src/.../date",{"_index":965,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../geojsonmultipoint.schema.ts",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hospital.schema.ts",{"_index":969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.service.ts",{"_index":967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":897,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../preparation.schema.ts",{"_index":970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../preparation.type.ts",{"_index":966,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../rank.schema.ts",{"_index":971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:35",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/date",{"_index":608,"title":{},"body":{"controllers/RankingController.html":{},"injectables/RankingService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/user.decorator",{"_index":348,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"controllers/UserController.html":{}}}],["src/common/decorators/user.decorator.ts",{"_index":837,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/create",{"_index":215,"title":{},"body":{"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"coverage.html":{}}}],["src/common/dtos/user.dto",{"_index":347,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"controllers/UserController.html":{}}}],["src/common/dtos/user.dto.ts",{"_index":751,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/common/dtos/user.dto.ts:5",{"_index":753,"title":{},"body":{"classes/UserDto.html":{}}}],["src/common/interfaces/geojsonmultipoint.interface.ts",{"_index":269,"title":{},"body":{"interfaces/GeoJSONMultiPoint.html":{},"coverage.html":{}}}],["src/common/interfaces/hospital.interface",{"_index":346,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{}}}],["src/common/interfaces/hospital.interface.ts",{"_index":273,"title":{},"body":{"interfaces/Hospital.html":{},"coverage.html":{}}}],["src/common/interfaces/preparation.interface",{"_index":406,"title":{},"body":{"injectables/HospitalsService.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{}}}],["src/common/interfaces/preparation.interface.ts",{"_index":490,"title":{},"body":{"interfaces/Preparation.html":{},"coverage.html":{}}}],["src/common/interfaces/rank.interface",{"_index":642,"title":{},"body":{"injectables/RankingService.html":{}}}],["src/common/interfaces/rank.interface.ts",{"_index":576,"title":{},"body":{"interfaces/Rank.html":{},"coverage.html":{}}}],["src/common/interfaces/type",{"_index":644,"title":{},"body":{"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"coverage.html":{}}}],["src/common/interfaces/user.interface",{"_index":803,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/interfaces/user.interface.ts",{"_index":741,"title":{},"body":{"interfaces/User.html":{},"coverage.html":{}}}],["src/common/pipes/date",{"_index":257,"title":{},"body":{"injectables/DateUnitPipe.html":{},"controllers/RankingController.html":{},"coverage.html":{}}}],["src/common/pipes/date.pipe",{"_index":522,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["src/common/pipes/date.pipe.ts",{"_index":242,"title":{},"body":{"injectables/DatePipe.html":{},"coverage.html":{}}}],["src/common/pipes/date.pipe.ts:11",{"_index":247,"title":{},"body":{"injectables/DatePipe.html":{}}}],["src/common/pipes/distance.pipe",{"_index":354,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["src/common/pipes/distance.pipe.ts",{"_index":265,"title":{},"body":{"injectables/DistancePipe.html":{},"coverage.html":{}}}],["src/common/pipes/distance.pipe.ts:10",{"_index":266,"title":{},"body":{"injectables/DistancePipe.html":{}}}],["src/common/pipes/hospital",{"_index":282,"title":{},"body":{"injectables/HospitalIdPipe.html":{},"controllers/RankingController.html":{},"coverage.html":{}}}],["src/common/pipes/latitudine.pipe",{"_index":353,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["src/common/pipes/latitudine.pipe.ts",{"_index":429,"title":{},"body":{"injectables/LatitudinePipe.html":{},"coverage.html":{}}}],["src/common/pipes/latitudine.pipe.ts:10",{"_index":430,"title":{},"body":{"injectables/LatitudinePipe.html":{}}}],["src/common/pipes/longitudine.pipe",{"_index":351,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["src/common/pipes/longitudine.pipe.ts",{"_index":488,"title":{},"body":{"injectables/LongitudinePipe.html":{},"coverage.html":{}}}],["src/common/pipes/longitudine.pipe.ts:10",{"_index":489,"title":{},"body":{"injectables/LongitudinePipe.html":{}}}],["src/common/pipes/preparation",{"_index":493,"title":{},"body":{"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"coverage.html":{}}}],["src/common/preparation.type",{"_index":349,"title":{},"body":{"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{}}}],["src/common/preparation.type.ts",{"_index":847,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/schemas/geojsonmultipoint.schema.ts",{"_index":849,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/schemas/hospital.schema",{"_index":381,"title":{},"body":{"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{}}}],["src/common/schemas/hospital.schema.ts",{"_index":851,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/schemas/preparation.schema",{"_index":379,"title":{},"body":{"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{}}}],["src/common/schemas/preparation.schema.ts",{"_index":852,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/schemas/rank.schema",{"_index":626,"title":{},"body":{"modules/RankingModule.html":{}}}],["src/common/schemas/rank.schema.ts",{"_index":853,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/schemas/user.schema",{"_index":778,"title":{},"body":{"modules/UserModule.html":{}}}],["src/common/schemas/user.schema.ts",{"_index":854,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":855,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middleware/authentication.middleware.ts",{"_index":137,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"coverage.html":{}}}],["src/middleware/authentication.middleware.ts:13",{"_index":148,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["src/middleware/authentication.middleware.ts:16",{"_index":143,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/guards/admin.guard.ts",{"_index":6,"title":{},"body":{"guards/AdminGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/admin.guard.ts:5",{"_index":13,"title":{},"body":{"guards/AdminGuard.html":{}}}],["src/modules/auth/guards/user.guard.ts",{"_index":754,"title":{},"body":{"guards/UserGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/user.guard.ts:10",{"_index":757,"title":{},"body":{"guards/UserGuard.html":{}}}],["src/modules/auth/guards/user.guard.ts:7",{"_index":756,"title":{},"body":{"guards/UserGuard.html":{}}}],["src/modules/hospitals/hospitals.controller.ts",{"_index":295,"title":{},"body":{"controllers/HospitalsController.html":{},"coverage.html":{}}}],["src/modules/hospitals/hospitals.controller.ts:27",{"_index":306,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["src/modules/hospitals/hospitals.controller.ts:36",{"_index":325,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["src/modules/hospitals/hospitals.controller.ts:47",{"_index":315,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["src/modules/hospitals/hospitals.controller.ts:60",{"_index":334,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["src/modules/hospitals/hospitals.controller.ts:71",{"_index":329,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["src/modules/hospitals/hospitals.module.ts",{"_index":376,"title":{},"body":{"modules/HospitalsModule.html":{}}}],["src/modules/hospitals/hospitals.service.ts",{"_index":389,"title":{},"body":{"injectables/HospitalsService.html":{},"coverage.html":{}}}],["src/modules/hospitals/hospitals.service.ts:10",{"_index":394,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["src/modules/hospitals/hospitals.service.ts:17",{"_index":397,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["src/modules/hospitals/hospitals.service.ts:25",{"_index":401,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["src/modules/hospitals/hospitals.service.ts:32",{"_index":399,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["src/modules/hospitals/hospitals.service.ts:52",{"_index":403,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["src/modules/preparations/preparations.controller.ts",{"_index":500,"title":{},"body":{"controllers/PreparationsController.html":{},"coverage.html":{}}}],["src/modules/preparations/preparations.controller.ts:35",{"_index":504,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["src/modules/preparations/preparations.controller.ts:51",{"_index":511,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["src/modules/preparations/preparations.module.ts",{"_index":540,"title":{},"body":{"modules/PreparationsModule.html":{}}}],["src/modules/preparations/preparations.service.ts",{"_index":543,"title":{},"body":{"injectables/PreparationsService.html":{},"coverage.html":{}}}],["src/modules/preparations/preparations.service.ts:11",{"_index":546,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["src/modules/preparations/preparations.service.ts:20",{"_index":548,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["src/modules/preparations/preparations.service.ts:32",{"_index":551,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["src/modules/preparations/preparations.service.ts:38",{"_index":554,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["src/modules/ranking/ranking.controller.ts",{"_index":580,"title":{},"body":{"controllers/RankingController.html":{},"coverage.html":{}}}],["src/modules/ranking/ranking.controller.ts:26",{"_index":603,"title":{},"body":{"controllers/RankingController.html":{}}}],["src/modules/ranking/ranking.controller.ts:36",{"_index":594,"title":{},"body":{"controllers/RankingController.html":{}}}],["src/modules/ranking/ranking.controller.ts:50",{"_index":599,"title":{},"body":{"controllers/RankingController.html":{}}}],["src/modules/ranking/ranking.controller.ts:68",{"_index":588,"title":{},"body":{"controllers/RankingController.html":{}}}],["src/modules/ranking/ranking.module.ts",{"_index":623,"title":{},"body":{"modules/RankingModule.html":{}}}],["src/modules/ranking/ranking.service.ts",{"_index":628,"title":{},"body":{"injectables/RankingService.html":{},"coverage.html":{}}}],["src/modules/ranking/ranking.service.ts:129",{"_index":638,"title":{},"body":{"injectables/RankingService.html":{}}}],["src/modules/ranking/ranking.service.ts:16",{"_index":633,"title":{},"body":{"injectables/RankingService.html":{}}}],["src/modules/ranking/ranking.service.ts:32",{"_index":640,"title":{},"body":{"injectables/RankingService.html":{}}}],["src/modules/ranking/ranking.service.ts:69",{"_index":635,"title":{},"body":{"injectables/RankingService.html":{}}}],["src/modules/ranking/ranking.service.ts:79",{"_index":641,"title":{},"body":{"injectables/RankingService.html":{}}}],["src/modules/user/user.controller.ts",{"_index":744,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:15",{"_index":746,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":775,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service",{"_index":343,"title":{},"body":{"controllers/HospitalsController.html":{},"guards/UserGuard.html":{}}}],["src/modules/user/user.service.ts",{"_index":780,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/user/user.service.ts:14",{"_index":800,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:16",{"_index":791,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:24",{"_index":797,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:28",{"_index":799,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:35",{"_index":795,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:52",{"_index":794,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:8",{"_index":789,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/tools/logger.service.ts",{"_index":433,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/tools/logger.service.ts:21",{"_index":452,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/utils/tools/logger.service.ts:22",{"_index":448,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/utils/tools/logger.service.ts:24",{"_index":449,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/utils/tools/logger.service.ts:26",{"_index":440,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/utils/tools/logger.service.ts:31",{"_index":442,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/utils/tools/logger.service.ts:44",{"_index":446,"title":{},"body":{"injectables/LoggerService.html":{}}}],["start",{"_index":508,"title":{},"body":{"controllers/PreparationsController.html":{},"injectables/RankingService.html":{},"index.html":{}}}],["start.todate",{"_index":720,"title":{},"body":{"injectables/RankingService.html":{}}}],["start:dev",{"_index":923,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":925,"title":{},"body":{"index.html":{}}}],["started",{"_index":899,"title":{"index.html":{}},"body":{}}],["starter",{"_index":912,"title":{},"body":{"index.html":{}}}],["starting",{"_index":319,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{}}}],["statements",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":198,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["stay",{"_index":944,"title":{},"body":{"index.html":{}}}],["string",{"_index":30,"title":{},"body":{"guards/AdminGuard.html":{},"classes/CreateHospitalDto.html":{},"interfaces/Hospital.html":{},"injectables/HospitalIdPipe.html":{},"injectables/LoggerService.html":{},"injectables/PreparationTypePipe.html":{},"interfaces/Rank.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":752,"title":{},"body":{"classes/UserDto.html":{}}}],["such",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{}}}],["sum",{"_index":724,"title":{},"body":{"injectables/RankingService.html":{}}}],["support",{"_index":931,"title":{},"body":{"index.html":{},"modules.html":{}}}],["suppositories",{"_index":998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["svg",{"_index":955,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":669,"title":{},"body":{"injectables/RankingService.html":{}}}],["table",{"_index":661,"title":{},"body":{"injectables/RankingService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":863,"title":{},"body":{"coverage.html":{}}}],["tablet",{"_index":994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test",{"_index":926,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":930,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":929,"title":{},"body":{"index.html":{}}}],["tests",{"_index":927,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":936,"title":{},"body":{"index.html":{}}}],["there's",{"_index":193,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["this.appcolor",{"_index":483,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.bg",{"_index":482,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.currentcolor",{"_index":474,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.getranksquery",{"_index":671,"title":{},"body":{"injectables/RankingService.html":{}}}],["this.gettyperank(type",{"_index":690,"title":{},"body":{"injectables/RankingService.html":{}}}],["this.getuser(authid))._id",{"_index":813,"title":{},"body":{"injectables/UserService.html":{}}}],["this.hospitalmodel",{"_index":410,"title":{},"body":{"injectables/HospitalsService.html":{},"injectables/PreparationsService.html":{},"injectables/RankingService.html":{}}}],["this.hospitalmodel(createhospitaldto).save(err",{"_index":409,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["this.hospitalmodel.find(query).exec",{"_index":421,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["this.hospitalsservice.create(hosp",{"_index":362,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["this.hospitalsservice.find(latitude",{"_index":367,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["this.hospitalsservice.findall",{"_index":363,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["this.hospitalsservice.getpreparationstypes",{"_index":369,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["this.httpservice",{"_index":815,"title":{},"body":{"injectables/UserService.html":{}}}],["this.loggers.get(namespace",{"_index":486,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.loggers.has(namespace",{"_index":467,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.loggers.set('loggers",{"_index":464,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.loggers.set(namespace",{"_index":472,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.managementtoken",{"_index":828,"title":{},"body":{"injectables/UserService.html":{}}}],["this.preparationmodel",{"_index":567,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["this.preparationmodel(createpreparationdto).save",{"_index":562,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["this.preparationmodel.aggregate(query).exec",{"_index":682,"title":{},"body":{"injectables/RankingService.html":{}}}],["this.preparationmodel.aggregate(query).exec())[0].all",{"_index":428,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["this.preparationsservice.addpreparation",{"_index":527,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["this.preparationsservice.create(prep",{"_index":526,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["this.preparationsservice.getpreparations",{"_index":536,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["this.print",{"_index":468,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.print(namespace",{"_index":476,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.rankingservice.getaveragerank(dateunit",{"_index":617,"title":{},"body":{"controllers/RankingController.html":{}}}],["this.rankingservice.getrank(type",{"_index":619,"title":{},"body":{"controllers/RankingController.html":{}}}],["this.rankingservice.gettyperank",{"_index":615,"title":{},"body":{"controllers/RankingController.html":{}}}],["this.rankingservice.gettyperank(type",{"_index":614,"title":{},"body":{"controllers/RankingController.html":{}}}],["this.rankingservice.setaverageranks",{"_index":612,"title":{},"body":{"controllers/RankingController.html":{}}}],["this.rankmodel",{"_index":706,"title":{},"body":{"injectables/RankingService.html":{}}}],["this.reset",{"_index":487,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.user",{"_index":807,"title":{},"body":{"injectables/UserService.html":{}}}],["this.user.findone",{"_index":811,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.gethospitalid(user.sub",{"_index":370,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{}}}],["this.userservice.getlinkedintoken(user.sub",{"_index":750,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuser(context.getargs()[0].user.sub",{"_index":771,"title":{},"body":{"guards/UserGuard.html":{}}}],["this.userservice.getuserhospital(user.sub",{"_index":372,"title":{},"body":{"controllers/HospitalsController.html":{}}}],["throw",{"_index":255,"title":{},"body":{"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"injectables/HospitalsService.html":{},"injectables/PreparationTypePipe.html":{},"injectables/RankingService.html":{}}}],["todate",{"_index":573,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["todo",{"_index":461,"title":{},"body":{"injectables/LoggerService.html":{}}}],["token",{"_index":169,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"controllers/HospitalsController.html":{},"controllers/RankingController.html":{},"controllers/UserController.html":{}}}],["tools",{"_index":463,"title":{},"body":{"injectables/LoggerService.html":{}}}],["topical",{"_index":996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["topromise()).data.access_token",{"_index":827,"title":{},"body":{"injectables/UserService.html":{}}}],["tot",{"_index":723,"title":{},"body":{"injectables/RankingService.html":{}}}],["touch",{"_index":945,"title":{},"body":{"index.html":{}}}],["transform",{"_index":243,"title":{},"body":{"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"injectables/LatitudinePipe.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{}}}],["transform(value",{"_index":244,"title":{},"body":{"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"injectables/LatitudinePipe.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{}}}],["transformer",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["trigger",{"_index":666,"title":{},"body":{"injectables/RankingService.html":{}}}],["true",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/RankingService.html":{},"miscellaneous/variables.html":{}}}],["tsconfig",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["tslint:disable",{"_index":478,"title":{},"body":{"injectables/LoggerService.html":{}}}],["twitter",{"_index":951,"title":{},"body":{"index.html":{}}}],["type",{"_index":17,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"interfaces/GeoJSONMultiPoint.html":{},"interfaces/Hospital.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"interfaces/Preparation.html":{},"injectables/PreparationTypePipe.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"interfaces/Rank.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"guards/UserGuard.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.pipe",{"_index":521,"title":{},"body":{"controllers/PreparationsController.html":{},"controllers/RankingController.html":{}}}],["type.pipe.ts",{"_index":494,"title":{},"body":{"injectables/PreparationTypePipe.html":{},"coverage.html":{}}}],["type.pipe.ts:12",{"_index":495,"title":{},"body":{"injectables/PreparationTypePipe.html":{}}}],["typealiases",{"_index":963,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typerank",{"_index":643,"title":{"interfaces/TypeRank.html":{}},"body":{"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"coverage.html":{}}}],["types",{"_index":224,"title":{},"body":{"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/HospitalIdPipe.html":{},"controllers/HospitalsController.html":{},"injectables/HospitalsService.html":{},"interfaces/Preparation.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"injectables/UserService.html":{}}}],["types.objectid",{"_index":222,"title":{},"body":{"classes/CreateHospitalDto.html":{},"classes/CreatePreparationDto.html":{},"injectables/HospitalsService.html":{},"interfaces/Preparation.html":{},"controllers/PreparationsController.html":{},"injectables/PreparationsService.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{},"interfaces/TypeRank.html":{},"interfaces/User.html":{},"injectables/UserService.html":{}}}],["types.objectid(value",{"_index":291,"title":{},"body":{"injectables/HospitalIdPipe.html":{}}}],["types.objectid.isvalid(hospitalid",{"_index":422,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["types.objectid.isvalid(value",{"_index":290,"title":{},"body":{"injectables/HospitalIdPipe.html":{}}}],["typescript",{"_index":893,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["unable",{"_index":203,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["unchangable",{"_index":514,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["unique",{"_index":445,"title":{},"body":{"injectables/LoggerService.html":{}}}],["unit",{"_index":596,"title":{},"body":{"controllers/RankingController.html":{},"injectables/RankingService.html":{},"index.html":{}}}],["unit.pipe",{"_index":609,"title":{},"body":{"controllers/RankingController.html":{}}}],["unit.pipe.ts",{"_index":258,"title":{},"body":{"injectables/DateUnitPipe.html":{},"coverage.html":{}}}],["unit.pipe.ts:11",{"_index":259,"title":{},"body":{"injectables/DateUnitPipe.html":{}}}],["unit.type",{"_index":262,"title":{},"body":{"injectables/DateUnitPipe.html":{},"controllers/RankingController.html":{},"injectables/RankingService.html":{}}}],["unit.type.ts",{"_index":834,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":680,"title":{},"body":{"injectables/RankingService.html":{}}}],["unused",{"_index":288,"title":{},"body":{"injectables/HospitalIdPipe.html":{}}}],["unwind",{"_index":730,"title":{},"body":{"injectables/RankingService.html":{}}}],["updating",{"_index":664,"title":{},"body":{"injectables/RankingService.html":{}}}],["use",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LoggerService.html":{}}}],["useclass",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{}}}],["used",{"_index":542,"title":{},"body":{"modules/PreparationsModule.html":{},"miscellaneous/variables.html":{}}}],["usefull",{"_index":285,"title":{},"body":{"injectables/HospitalIdPipe.html":{}}}],["useguards",{"_index":338,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{}}}],["useguards(new",{"_index":359,"title":{},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{}}}],["usenewurlparser",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":29,"title":{"interfaces/User.html":{}},"body":{"guards/AdminGuard.html":{},"modules/AuthModule.html":{},"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":336,"title":{},"body":{"controllers/HospitalsController.html":{},"classes/UserDto.html":{},"guards/UserGuard.html":{}}}],["user.controller",{"_index":779,"title":{},"body":{"modules/UserModule.html":{}}}],["user.indexof('admin",{"_index":33,"title":{},"body":{"guards/AdminGuard.html":{}}}],["user.service",{"_index":747,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{}}}],["user/user.service",{"_index":519,"title":{},"body":{"controllers/PreparationsController.html":{},"controllers/RankingController.html":{}}}],["usercontroller",{"_index":743,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":327,"title":{"classes/UserDto.html":{}},"body":{"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["userguard",{"_index":112,"title":{"guards/UserGuard.html":{}},"body":{"modules/AuthModule.html":{},"guards/UserGuard.html":{},"coverage.html":{}}}],["userid",{"_index":806,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":53,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users's",{"_index":761,"title":{},"body":{"guards/UserGuard.html":{}}}],["userschema",{"_index":777,"title":{},"body":{"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":133,"title":{"injectables/UserService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/HospitalsController.html":{},"controllers/PreparationsController.html":{},"controllers/RankingController.html":{},"controllers/UserController.html":{},"guards/UserGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":533,"title":{},"body":{"controllers/PreparationsController.html":{}}}],["validates",{"_index":150,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["validation",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{}}}],["validator",{"_index":240,"title":{},"body":{"classes/CreatePreparationDto.html":{},"dependencies.html":{}}}],["validity",{"_index":168,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["vals",{"_index":702,"title":{},"body":{"injectables/RankingService.html":{}}}],["vals.push(rank",{"_index":717,"title":{},"body":{"injectables/RankingService.html":{}}}],["value",{"_index":146,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{},"injectables/DatePipe.html":{},"injectables/DateUnitPipe.html":{},"injectables/DistancePipe.html":{},"injectables/HospitalIdPipe.html":{},"injectables/LatitudinePipe.html":{},"injectables/LoggerService.html":{},"injectables/LongitudinePipe.html":{},"injectables/PreparationTypePipe.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":89,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["very",{"_index":985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerService.html":{}}}],["warning",{"_index":560,"title":{},"body":{"injectables/PreparationsService.html":{}}}],["watch",{"_index":921,"title":{},"body":{"index.html":{}}}],["way",{"_index":659,"title":{},"body":{"injectables/RankingService.html":{}}}],["web",{"_index":163,"title":{},"body":{"injectables/AuthenticationMiddleware.html":{}}}],["website",{"_index":949,"title":{},"body":{"index.html":{}}}],["works",{"_index":417,"title":{},"body":{"injectables/HospitalsService.html":{}}}],["write",{"_index":660,"title":{},"body":{"injectables/RankingService.html":{}}}],["x1b[0m",{"_index":451,"title":{},"body":{"injectables/LoggerService.html":{}}}],["x1b[31m",{"_index":456,"title":{},"body":{"injectables/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["x1b[32m",{"_index":457,"title":{},"body":{"injectables/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["x1b[33m",{"_index":458,"title":{},"body":{"injectables/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["x1b[34m",{"_index":459,"title":{},"body":{"injectables/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["x1b[35m",{"_index":460,"title":{},"body":{"injectables/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["x1b[36m",{"_index":466,"title":{},"body":{"injectables/LoggerService.html":{}}}],["x1b[40m",{"_index":447,"title":{},"body":{"injectables/LoggerService.html":{}}}],["year",{"_index":601,"title":{},"body":{"controllers/RankingController.html":{},"injectables/RankingService.html":{},"miscellaneous/variables.html":{}}}],["yes",{"_index":400,"title":{},"body":{"injectables/HospitalsService.html":{},"injectables/LoggerService.html":{},"injectables/RankingService.html":{}}}],["you'd",{"_index":940,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HospitalsModule.html":{},"modules/PreparationsModule.html":{},"modules/RankingModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AdminGuard.html":{"url":"guards/AdminGuard.html","title":"guard - AdminGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AdminGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/guards/admin.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/admin.guard.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const user: string[] =\n      context.getArgs()[0].user['http://localhost:3000/roles'] || '';\n    return user.indexOf('admin') > -1;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHospitalsModule\n\nHospitalsModule\n\nAppModule -->\n\nHospitalsModule->AppModule\n\n\n\n\n\nPreparationsModule\n\nPreparationsModule\n\nAppModule -->\n\nPreparationsModule->AppModule\n\n\n\n\n\nRankingModule\n\nRankingModule\n\nAppModule -->\n\nRankingModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            HospitalsModule\n                        \n                        \n                            PreparationsModule\n                        \n                        \n                            RankingModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, NestModule, MiddlewareConsumer } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthModule } from './modules/auth/auth.module';\n// import { ConfigModule } from './modules/config/config.module';\nimport { HospitalsModule } from './modules/hospitals/hospitals.module';\nimport { PreparationsModule } from './modules/preparations/preparations.module';\nimport { AuthenticationMiddleware } from './middleware/authentication.middleware';\nimport { UserModule } from './modules/user/user.module';\nimport { RankingModule } from './modules/ranking/ranking.module';\n// // same reason of the main\n// import * as dotenv from 'dotenv';\n// import * as fs from 'fs';\n// const db = dotenv.parse(\n//   fs.readFileSync(`${process.env.NODE_ENV || 'development'}.env`),\n// ).DATABASE;\n\n@Module({\n  imports: [\n    // contains the environment variables\n    // ConfigModule,\n    // connect to db\n    // MongooseModule is a mongoose module made by nest\n    MongooseModule.forRoot(process.env.DATABASE, { useNewUrlParser: true }),\n    // importing this we set the guards provided by the module as global\n    AuthModule,\n    PreparationsModule,\n    HospitalsModule,\n    UserModule,\n    RankingModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    // apply authentication middleware for all routes\n    consumer.apply(AuthenticationMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { UserGuard } from './guards/user.guard';\nimport { UserModule } from '../user/user.module';\n\n/**\n * @classdesc Responsable of the user validation\n */\n@Module({\n  imports: [UserModule],\n  providers: [\n    // the \"core\" of the validation: UserGuard contains the policy that makes an user able to get the information\n    // putting the UserGuard here instead of in any single method of controllers makes UserGuard global and, more important,\n    // enables the UserGuard to use imported modules (such as UserService in UserModule)\n    {\n      provide: APP_GUARD,\n      useClass: UserGuard,\n    },\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationMiddleware.html":{"url":"injectables/AuthenticationMiddleware.html","title":"injectable - AuthenticationMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/authentication.middleware.ts\n        \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                DOMAIN\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resolve\n                        \n                        \n                    \n                \n            \n            \n                \nresolve()\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/authentication.middleware.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     MiddlewareFunction\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            DOMAIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.AUTH0_DOMAIN\n                        \n                    \n                        \n                            \n                                    Defined in src/middleware/authentication.middleware.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, MiddlewareFunction, NestMiddleware } from '@nestjs/common';\n// Middleware that validates JsonWebTokens and sets req.user\nimport * as jwt from 'express-jwt';\n// A library to retrieve RSA signing keys from a JWKS (JSON Web Key Set) endpoint.\nimport { expressJwtSecret } from 'jwks-rsa';\n\n/**\n * @class AuthenticationMiddleware\n * @classdesc Middleware that check the validity of the token\n */\n@Injectable()\nexport class AuthenticationMiddleware implements NestMiddleware {\n  readonly DOMAIN = process.env.AUTH0_DOMAIN;\n\n  // NestMiddleware's interface function that return a middleware function\n  resolve(): MiddlewareFunction {\n    return (req, res, next) => {\n      // here it validates JsonWebTokens (JWT)\n      jwt({\n        // here it retrives the secret (RSA signing keys) from auth0 endpoint.\n        secret: expressJwtSecret({\n          cache: true,\n          rateLimit: true,\n          jwksRequestsPerMinute: 5,\n          jwksUri: `https://${this.DOMAIN}/.well-known/jwks.json`,\n        }),\n\n        audience: 'http://localhost:3000',\n        issuer: `https://${this.DOMAIN}/`,\n        algorithm: 'RS256',\n      })(req, res, err => {\n        // if there's an error checking the token, a message is sent\n        if (err) {\n          const status = err.status || 500;\n          const message =\n            err.message || 'Sorry, we were unable to process your request.';\n          return res.status(status).send({\n            message,\n          });\n        }\n        // if no errors occured, the pipeline goes on. Moreover 'Jwt' has setted the req.user\n        next();\n      });\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateHospitalDto.html":{"url":"classes/CreateHospitalDto.html","title":"class - CreateHospitalDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateHospitalDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/create-hospital.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                coordinates\n                            \n                            \n                                name\n                            \n                            \n                                preparations\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            coordinates\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GeoJSONMultiPoint\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dtos/create-hospital.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dtos/create-hospital.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            preparations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [Types.ObjectId]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dtos/create-hospital.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Types } from 'mongoose';\nimport { GeoJSONMultiPoint } from '../interfaces/geoJSONMultiPoint.interface';\n\nexport class CreateHospitalDto {\n  name: string;\n  coordinates: GeoJSONMultiPoint;\n  preparations: [Types.ObjectId];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePreparationDto.html":{"url":"classes/CreatePreparationDto.html","title":"class - CreatePreparationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePreparationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/create-preparation.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                hospital\n                            \n                            \n                                numberOfPreparations\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDateString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/dtos/create-preparation.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hospital\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Types.ObjectId\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dtos/create-preparation.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numberOfPreparations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dtos/create-preparation.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PreparationType\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dtos/create-preparation.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Types } from 'mongoose';\nimport { PreparationType } from '../preparation.type';\nimport { IsDateString } from 'class-validator';\n\nexport class CreatePreparationDto {\n  type: PreparationType;\n  numberOfPreparations: number;\n  @IsDateString()\n  date: Date;\n  hospital: Types.ObjectId;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatePipe.html":{"url":"injectables/DatePipe.html","title":"injectable - DatePipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DatePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/date.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/date.pipe.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  Injectable,\n  PipeTransform,\n  BadRequestException,\n} from '@nestjs/common';\nimport moment = require('moment');\n\n@Injectable()\nexport class DatePipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    if (value && moment(value).isValid()) {\n      return new Date(value);\n    }\n    throw new BadRequestException();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DateUnitPipe.html":{"url":"injectables/DateUnitPipe.html","title":"injectable - DateUnitPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DateUnitPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/date-unit.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/date-unit.pipe.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  Injectable,\n  PipeTransform,\n  BadRequestException,\n} from '@nestjs/common';\nimport { DateUnit, DateUnitsArray } from '../date-unit.type';\n\n@Injectable()\nexport class DateUnitPipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    if (!value || DateUnitsArray.indexOf(value) === -1) {\n      throw new BadRequestException();\n    }\n    return value as DateUnit;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DistancePipe.html":{"url":"injectables/DistancePipe.html","title":"injectable - DistancePipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DistancePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/distance.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/distance.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  Injectable,\n  PipeTransform,\n  BadRequestException,\n} from '@nestjs/common';\n\n@Injectable()\nexport class DistancePipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    if (value > 0) {\n      return value;\n    }\n    throw new BadRequestException();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GeoJSONMultiPoint.html":{"url":"interfaces/GeoJSONMultiPoint.html","title":"interface - GeoJSONMultiPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GeoJSONMultiPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/geoJSONMultiPoint.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        coordinates\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coordinates\n                                    \n                                \n                                \n                                    \n                                        coordinates:     []\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     []\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\n\nexport interface GeoJSONMultiPoint extends Document {\n  readonly type: 'MultiPoint';\n  readonly coordinates: [[number]];\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Hospital.html":{"url":"interfaces/Hospital.html","title":"interface - Hospital","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Hospital\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/hospital.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        averageRanks\n                                \n                                \n                                        coordinate\n                                \n                                \n                                        name\n                                \n                                \n                                        preparations\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        averageRanks\n                                    \n                                \n                                \n                                    \n                                        averageRanks:         [Rank]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         [Rank]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        coordinate\n                                    \n                                \n                                \n                                    \n                                        coordinate:         GeoJSONMultiPoint\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         GeoJSONMultiPoint\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preparations\n                                    \n                                \n                                \n                                    \n                                        preparations:         [Preparation]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         [Preparation]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { Preparation } from './preparation.interface';\nimport { GeoJSONMultiPoint } from './geoJSONMultiPoint.interface';\nimport { Rank } from './rank.interface';\n\nexport interface Hospital extends Document {\n  readonly name: string;\n  readonly coordinate: GeoJSONMultiPoint;\n  readonly preparations: [Preparation];\n  readonly averageRanks: [Rank];\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HospitalIdPipe.html":{"url":"injectables/HospitalIdPipe.html","title":"injectable - HospitalIdPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  HospitalIdPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/hospital-id.pipe.ts\n        \n\n            \n                Description\n            \n            \n                could be usefull even if it's unused\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/hospital-id.pipe.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  Injectable,\n  PipeTransform,\n  BadRequestException,\n} from '@nestjs/common';\nimport { Types } from 'mongoose';\n\n/**\n * could be usefull even if it's unused\n */\n@Injectable()\nexport class HospitalIdPipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    if (value && Types.ObjectId.isValid(value as string)) {\n      return Types.ObjectId(value);\n    }\n    throw new BadRequestException(`Bad Request`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HospitalsController.html":{"url":"controllers/HospitalsController.html","title":"controller - HospitalsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HospitalsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/hospitals/hospitals.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                hospitals\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createHospital\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getHospital\n                            \n                            \n                                    Async\n                                getpreparationTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createHospital\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createHospital(hosp: CreateHospitalDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(new AdminGuard())\n                \n            \n\n            \n                \n                    Defined in src/modules/hospitals/hospitals.controller.ts:27\n                \n            \n\n\n            \n                \n                    Creates a new hospital\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hosp\n                                    \n                                                CreateHospitalDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The hospital object. It must accord with CreateHospitalDto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(longitude: number, latitude: number, distance: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/location')\n                \n            \n\n            \n                \n                    Defined in src/modules/hospitals/hospitals.controller.ts:47\n                \n            \n\n\n            \n                \n                    Returns all hospitals in the passed range\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    longitude\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the longitude of the starting point\n\n                                    \n                                \n                                \n                                    latitude\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the latitude of the starting point\n\n                                    \n                                \n                                \n                                    distance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the radius of the circle\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(new AdminGuard())\n                \n            \n\n            \n                \n                    Defined in src/modules/hospitals/hospitals.controller.ts:36\n                \n            \n\n\n            \n                \n                    Returns all hospitals\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getHospital\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHospital(user: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/myHospital')\n                \n            \n\n            \n                \n                    Defined in src/modules/hospitals/hospitals.controller.ts:71\n                \n            \n\n\n            \n                \n                    The hospital associated to the user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user gotten by the token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getpreparationTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getpreparationTypes(user: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/preparationsTypes')\n                \n            \n\n            \n                \n                    Defined in src/modules/hospitals/hospitals.controller.ts:60\n                \n            \n\n\n            \n                \n                    The list of the user's hospital preparation types\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user gotten by the token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Get, UseGuards, Post, Query } from '@nestjs/common';\nimport { HospitalsService } from './hospitals.service';\nimport { UserService } from 'src/modules/user/user.service';\nimport { AdminGuard } from '../auth/guards/admin.guard';\nimport { CreateHospitalDto } from 'src/common/dtos/create-hospital.dto';\nimport { Hospital } from 'src/common/interfaces/hospital.interface';\nimport { UserDto } from 'src/common/dtos/user.dto';\nimport { User } from 'src/common/decorators/user.decorator';\nimport { PreparationType } from 'src/common/preparation.type';\nimport { LongitudinePipe } from 'src/common/pipes/longitudine.pipe';\nimport { LatitudinePipe } from 'src/common/pipes/latitudine.pipe';\nimport { DistancePipe } from 'src/common/pipes/distance.pipe';\n\n@Controller('hospitals')\nexport class HospitalsController {\n  constructor(\n    private readonly hospitalsService: HospitalsService,\n    private readonly userService: UserService,\n  ) {}\n\n  /**\n   * Creates a new hospital\n   * @param hosp The hospital object. It must accord with CreateHospitalDto\n   */\n  @Post()\n  @UseGuards(new AdminGuard())\n  async createHospital(@Body() hosp: CreateHospitalDto) {\n    return await this.hospitalsService.create(hosp);\n  }\n\n  /**\n   * Returns all hospitals\n   */\n  @Get()\n  @UseGuards(new AdminGuard())\n  async findAll() {\n    return this.hospitalsService.findAll();\n  }\n\n  /**\n   * Returns all hospitals in the passed range\n   * @param longitude the longitude of the starting point\n   * @param latitude the latitude of the starting point\n   * @param distance the radius of the circle\n   */\n  @Get('/location')\n  async find(\n    @Query('longitude', new LongitudinePipe()) longitude: number,\n    @Query('latitude', new LatitudinePipe()) latitude: number,\n    @Query('distance', new DistancePipe()) distance: number,\n  ): Promise {\n    return this.hospitalsService.find(latitude, longitude, distance);\n  }\n\n  /**\n   * The list of the user's hospital preparation types\n   * @param user The user gotten by the token\n   */\n  @Get('/preparationsTypes')\n  async getpreparationTypes(@User() user: UserDto): Promise {\n    return await this.hospitalsService.getPreparationsTypes(\n      await this.userService.getHospitalID(user.sub),\n    );\n  }\n\n  /**\n   * The hospital associated to the user\n   * @param user The user gotten by the token\n   */\n  @Get('/myHospital')\n  async getHospital(@User() user: UserDto): Promise {\n    return (await this.userService.getUserHospital(user.sub))\n      .hospital as Hospital;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HospitalsModule.html":{"url":"modules/HospitalsModule.html","title":"module - HospitalsModule","body":"\n                   \n\n\n\n\n    Modules\n    HospitalsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HospitalsModule\n\n\n\ncluster_HospitalsModule_imports\n\n\n\ncluster_HospitalsModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nHospitalsModule\n\nHospitalsModule\n\nHospitalsModule -->\n\nUserModule->HospitalsModule\n\n\n\n\n\nHospitalsService\n\nHospitalsService\n\nHospitalsModule -->\n\nHospitalsService->HospitalsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/hospitals/hospitals.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HospitalsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HospitalsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HospitalsController } from './hospitals.controller';\nimport { HospitalsService } from './hospitals.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserModule } from '../user/user.module';\nimport { PreparationSchema } from 'src/common/schemas/preparation.schema';\nimport { HospitalSchema } from 'src/common/schemas/hospital.schema';\n\n@Module({\n  imports: [\n    // forFeature: record a new pair  in the scope\n    // name: the name of the model\n    // schema: the schema\n    MongooseModule.forFeature([{ name: 'Hospital', schema: HospitalSchema }]),\n    MongooseModule.forFeature([\n      { name: 'Preparation', schema: PreparationSchema },\n    ]),\n    UserModule,\n  ],\n  controllers: [HospitalsController],\n  providers: [HospitalsService],\n})\nexport class HospitalsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HospitalsService.html":{"url":"injectables/HospitalsService.html","title":"injectable - HospitalsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  HospitalsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/hospitals/hospitals.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getPreparationsTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hospitalModel: Model, preparationModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/hospitals/hospitals.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hospitalModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        preparationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createHospitalDto: CreateHospitalDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/hospitals/hospitals.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createHospitalDto\n                                    \n                                                CreateHospitalDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(latitude: number, longitude: number, distance?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/hospitals/hospitals.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    latitude\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    longitude\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    distance\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/hospitals/hospitals.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPreparationsTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPreparationsTypes(hospitalId: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/hospitals/hospitals.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hospitalId\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Types } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Hospital } from 'src/common/interfaces/hospital.interface';\nimport { Preparation } from 'src/common/interfaces/preparation.interface';\nimport { CreateHospitalDto } from 'src/common/dtos/create-hospital.dto';\nimport { PreparationType } from 'src/common/preparation.type';\n\n@Injectable()\nexport class HospitalsService {\n  constructor(\n    @InjectModel('Hospital') private readonly hospitalModel: Model,\n    @InjectModel('Preparation')\n    private readonly preparationModel: Model,\n  ) {}\n\n  async create(createHospitalDto: CreateHospitalDto): Promise {\n    return await new this.hospitalModel(createHospitalDto).save(err => {\n      if (err) {\n        throw err;\n      }\n    });\n  }\n\n  async findAll(): Promise {\n    return await this.hospitalModel\n      .find()\n      .populate('preparations')\n      .exec();\n  }\n\n  async find(\n    latitude: number,\n    longitude: number,\n    distance?: number,\n  ): Promise {\n    const query = {\n      coordinates: {\n        $nearSphere: {\n          $geometry: {\n            type: 'Point',\n            coordinates: [longitude, latitude],\n          },\n          // \"distance\" is in kilomiters and maxDistance works in meters.\n          $maxDistance: (distance || 100) * 1000,\n        },\n      },\n    };\n    return this.hospitalModel.find(query).exec();\n  }\n\n  async getPreparationsTypes(\n    hospitalId: Types.ObjectId,\n  ): Promise {\n    if (Types.ObjectId.isValid(hospitalId)) {\n      const query = [\n        {\n          $match: {\n            hospital: hospitalId,\n          },\n        },\n        {\n          $group: {\n            _id: '$type',\n          },\n        },\n        {\n          $group: {\n            _id: false,\n            all: {\n              $push: '$_id',\n            },\n          },\n        },\n      ];\n      return (await this.preparationModel.aggregate(query).exec())[0].all;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LatitudinePipe.html":{"url":"injectables/LatitudinePipe.html","title":"injectable - LatitudinePipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LatitudinePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/latitudine.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/latitudine.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  Injectable,\n  PipeTransform,\n  BadRequestException,\n} from '@nestjs/common';\n\n@Injectable()\nexport class LatitudinePipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    if (value && Math.abs(value) \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/tools/logger.service.ts\n        \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                bg\n                            \n                            \n                                    Private\n                                currentColor\n                            \n                            \n                                    Private\n                                loggers\n                            \n                            \n                                    Private\n                                    Readonly\n                                reset\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                log\n                            \n                            \n                                    Private\n                                print\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/utils/tools/logger.service.ts:26\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            log\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    log(namespace: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/tools/logger.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    namespace\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            print\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    print(namespace: string, message: string, unique?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/tools/logger.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    namespace\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    unique\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            bg\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '\\x1b[40m'\n                        \n                    \n                        \n                            \n                                    Defined in src/utils/tools/logger.service.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/utils/tools/logger.service.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loggers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/utils/tools/logger.service.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            reset\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '\\x1b[0m'\n                        \n                    \n                        \n                            \n                                    Defined in src/utils/tools/logger.service.ts:21\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n// import { ConfigService } from '../../modules/config/config.service';\n\nconst fgcolors = [\n  // '\\x1b[31m',\n  '\\x1b[32m',\n  '\\x1b[33m',\n  '\\x1b[34m',\n  '\\x1b[35m',\n];\n\n// TODO Return a 'log' function instead of a class?\n/**\n * @classdesc Logging and other tools\n */\n@Injectable()\nexport class LoggerService {\n  private readonly reset = '\\x1b[0m';\n  private readonly bg = '\\x1b[40m';\n\n  private currentColor = 0;\n\n  private loggers: Map = new Map();\n  constructor() {\n    this.loggers.set('LOGGERS-MANAGER', '\\x1b[36m');\n  }\n\n  public log(namespace: string, message: string) {\n    if (!this.loggers.has(namespace)) {\n      this.print(\n        'LOGGERS-MANAGER',\n        'namespace does not exist, creating new logger...',\n        true,\n      );\n      this.loggers.set(namespace, fgcolors[this.currentColor]);\n      this.currentColor = (this.currentColor + 1) % fgcolors.length;\n    }\n    this.print(namespace, message);\n  }\n\n  private print(namespace: string, message: string, unique?: boolean) {\n    if (!Boolean(process.env.DETAILS)) {\n      return;\n    }\n    // tslint:disable-next-line: no-console\n    console.log(\n      // this.bg +\n      // this.appColor +\n      // '[App] - ' +\n      // TODO We can use moment\n      // BeautifyDate.beautify(Date.now()) +\n      //   ' ' +\n      this.loggers.get(namespace) +\n        '[app:' +\n        namespace +\n        '] ' +\n        (unique ? '' : this.reset) +\n        message +\n        this.reset,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LongitudinePipe.html":{"url":"injectables/LongitudinePipe.html","title":"injectable - LongitudinePipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LongitudinePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/longitudine.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/longitudine.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  Injectable,\n  PipeTransform,\n  BadRequestException,\n} from '@nestjs/common';\n\n@Injectable()\nexport class LongitudinePipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    if (value && Math.abs(value) \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Preparation.html":{"url":"interfaces/Preparation.html","title":"interface - Preparation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Preparation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/preparation.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                        date\n                                \n                                \n                                        hospital\n                                \n                                \n                                        numberOfPreparations\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hospital\n                                    \n                                \n                                \n                                    \n                                        hospital:         Hospital | Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Hospital | Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numberOfPreparations\n                                    \n                                \n                                \n                                    \n                                        numberOfPreparations:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         PreparationType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PreparationType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document, Types } from 'mongoose';\nimport { PreparationType } from '../preparation.type';\nimport { Hospital } from './hospital.interface';\n\nexport interface Preparation extends Document {\n  readonly _id: any;\n  readonly numberOfPreparations: number;\n  readonly date: Date;\n  readonly type: PreparationType;\n  readonly hospital: Hospital | Types.ObjectId;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PreparationTypePipe.html":{"url":"injectables/PreparationTypePipe.html","title":"injectable - PreparationTypePipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PreparationTypePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/preparation-type.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/preparation-type.pipe.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PreparationType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  BadRequestException,\n} from '@nestjs/common';\nimport { PreparationType, PreparationTypesArray } from '../preparation.type';\n\n@Injectable()\nexport class PreparationTypePipe\n  implements PipeTransform {\n  transform(value: string, metadata: ArgumentMetadata): PreparationType {\n    if (value && PreparationTypesArray.indexOf(value) === -1) {\n      throw new BadRequestException(\n        `'${value}' is not a known preparation type`,\n      );\n    }\n    return value as PreparationType;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PreparationsController.html":{"url":"controllers/PreparationsController.html","title":"controller - PreparationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PreparationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/preparations/preparations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                preparations\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPreparation\n                            \n                            \n                                    Async\n                                getPrepration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createPreparation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPreparation(prep: CreatePreparationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(new AdminGuard())\n                \n            \n\n            \n                \n                    Defined in src/modules/preparations/preparations.controller.ts:35\n                \n            \n\n\n            \n                \n                    Creates a new preparation and associates it with the hospital\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    prep\n                                    \n                                                CreatePreparationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The preparation object. It must accord with CreatePreparationDto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPrepration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrepration(user: UserDto, type: PreparationType, start: Date, end: Date)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:type')\n                \n            \n\n            \n                \n                    Defined in src/modules/preparations/preparations.controller.ts:51\n                \n            \n\n\n            \n                \n                    Returns all preparation types of the hospital associated to the user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user object inserted by express-jwt in AuthenicationMiddleware (for this reason, it is unchangable by the client)\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                PreparationType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the preparation type\n\n                                    \n                                \n                                \n                                    start\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the starting date\n\n                                    \n                                \n                                \n                                    end\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the ending date\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n  Body,\n  Query,\n} from '@nestjs/common';\nimport { Types } from 'mongoose';\nimport { PreparationsService } from './preparations.service';\nimport { UserService } from '../user/user.service';\nimport { AdminGuard } from '../auth/guards/admin.guard';\nimport { CreatePreparationDto } from 'src/common/dtos/create-preparation.dto';\nimport { User } from 'src/common/decorators/user.decorator';\nimport { UserDto } from 'src/common/dtos/user.dto';\nimport { PreparationTypePipe } from 'src/common/pipes/preparation-type.pipe';\nimport { PreparationType } from 'src/common/preparation.type';\nimport { Preparation } from 'src/common/interfaces/preparation.interface';\nimport { DatePipe } from 'src/common/pipes/date.pipe';\n\n@Controller('preparations')\nexport class PreparationsController {\n  constructor(\n    private readonly preparationsService: PreparationsService,\n    private readonly userService: UserService,\n  ) {}\n\n  /**\n   * Creates a new preparation and associates it with the hospital\n   * @param prep The preparation object. It must accord with CreatePreparationDto\n   */\n  @Post()\n  @UseGuards(new AdminGuard())\n  async createPreparation(@Body() prep: CreatePreparationDto) {\n    const newPrep = await this.preparationsService.create(prep);\n    await this.preparationsService.addPreparation(\n      newPrep.hospital as Types.ObjectId,\n      newPrep._id,\n    );\n  }\n\n  /**\n   * Returns all preparation types of the hospital associated to the user\n   * @param user user object inserted by express-jwt in AuthenicationMiddleware (for this reason, it is unchangable by the client)\n   * @param type the preparation type\n   * @param start the starting date\n   * @param end the ending date\n   */\n  @Get('/:type')\n  async getPrepration(\n    @User() user: UserDto,\n    @Param('type', new PreparationTypePipe()) type: PreparationType,\n    @Query('start', new DatePipe()) start: Date,\n    @Query('end', new DatePipe()) end: Date,\n  ): Promise {\n    // Uses the userService to get the hosptial of the user, than uses the hospitalId to retrive the preparations\n    return await this.preparationsService.getPreparations(\n      await this.userService.getHospitalID(user.sub),\n      type,\n      [start, end],\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PreparationsModule.html":{"url":"modules/PreparationsModule.html","title":"module - PreparationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PreparationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PreparationsModule\n\n\n\ncluster_PreparationsModule_imports\n\n\n\ncluster_PreparationsModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nPreparationsModule\n\nPreparationsModule\n\nPreparationsModule -->\n\nUserModule->PreparationsModule\n\n\n\n\n\nPreparationsService\n\nPreparationsService\n\nPreparationsModule -->\n\nPreparationsService->PreparationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/preparations/preparations.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PreparationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PreparationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PreparationsService } from './preparations.service';\nimport { PreparationsController } from './preparations.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserModule } from '../user/user.module';\nimport { PreparationSchema } from 'src/common/schemas/preparation.schema';\nimport { HospitalSchema } from 'src/common/schemas/hospital.schema';\n\n@Module({\n  imports: [\n    // which schema has to be used in this scope\n    MongooseModule.forFeature([\n      { name: 'Preparation', schema: PreparationSchema },\n      { name: 'Hospital', schema: HospitalSchema },\n    ]),\n    UserModule,\n  ],\n  controllers: [PreparationsController],\n  providers: [PreparationsService],\n})\nexport class PreparationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PreparationsService.html":{"url":"injectables/PreparationsService.html","title":"injectable - PreparationsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PreparationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/preparations/preparations.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addPreparation\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getPreparations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hospitalModel: Model, preparationModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/preparations/preparations.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hospitalModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        preparationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addPreparation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPreparation(preparationID: Types.ObjectId, hospitalID: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/preparations/preparations.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    preparationID\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hospitalID\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createPreparationDto: CreatePreparationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/preparations/preparations.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPreparationDto\n                                    \n                                                CreatePreparationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPreparations\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPreparations(hospitalId: Types.ObjectId, pType: PreparationType, range: Date[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/preparations/preparations.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hospitalId\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pType\n                                    \n                                                PreparationType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                            Date[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Types } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport * as moment from 'moment';\nimport { Hospital } from 'src/common/interfaces/hospital.interface';\nimport { Preparation } from 'src/common/interfaces/preparation.interface';\nimport { CreatePreparationDto } from 'src/common/dtos/create-preparation.dto';\nimport { PreparationType } from 'src/common/preparation.type';\n\n@Injectable()\nexport class PreparationsService {\n  constructor(\n    // inject the module scoped (in the preparation.module.ts) into preparationModel\n    @InjectModel('Hospital')\n    private readonly hospitalModel: Model,\n    @InjectModel('Preparation')\n    private readonly preparationModel: Model,\n  ) {}\n\n  async addPreparation(\n    preparationID: Types.ObjectId,\n    hospitalID: Types.ObjectId,\n  ): Promise {\n    // produces a false deprecation warning\n    return this.hospitalModel\n      .findByIdAndUpdate(hospitalID, {\n        $push: { preparations: preparationID },\n      })\n      .exec();\n  }\n\n  async create(\n    createPreparationDto: CreatePreparationDto,\n  ): Promise {\n    return await new this.preparationModel(createPreparationDto).save();\n  }\n\n  async getPreparations(\n    hospitalId: Types.ObjectId,\n    pType: PreparationType,\n    range: Date[],\n  ): Promise {\n    const now = moment(range[0]).startOf('day');\n    return (await this.hospitalModel\n      .findById(hospitalId)\n      .populate(\n        'preparations',\n        'numberOfPreparations date type',\n        this.preparationModel,\n        {\n          type: pType,\n          date: {\n            $gte: now.toDate(),\n            $lt: moment(range[1])\n              .endOf('day')\n              .toDate(),\n          },\n        },\n        {\n          sort: {\n            date: 1,\n          },\n        },\n      )\n      .exec()).preparations;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Rank.html":{"url":"interfaces/Rank.html","title":"interface - Rank","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Rank\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/rank.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        lastUpdate\n                                \n                                \n                                        period\n                                \n                                \n                                        rank\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastUpdate\n                                    \n                                \n                                \n                                    \n                                        lastUpdate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        period\n                                    \n                                \n                                \n                                    \n                                        period:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rank\n                                    \n                                \n                                \n                                    \n                                        rank:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\n\nexport interface Rank extends Document {\n  period: string;\n  rank: number;\n  lastUpdate: Date;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RankingController.html":{"url":"controllers/RankingController.html","title":"controller - RankingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RankingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/ranking/ranking.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                ranking\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getRank\n                            \n                            \n                                    Async\n                                getTypeRank\n                            \n                            \n                                    Async\n                                getTypeRankHospital\n                            \n                            \n                                    Async\n                                setAverageRanks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRank\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRank(hospitalId: Types.ObjectId, dateUnit: DateUnit)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('position/:hospitalId')\n                \n            \n\n            \n                \n                    Defined in src/modules/ranking/ranking.controller.ts:68\n                \n            \n\n\n            \n                \n                    Returns the average rank of an hospital in a period ('day' returns null)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hospitalId\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The hospital ID\n\n                                    \n                                \n                                \n                                    dateUnit\n                                    \n                                                DateUnit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The period\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTypeRank\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTypeRank(type: PreparationType, dateUnit: DateUnit)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:type')\n                \n            \n\n            \n                \n                    Defined in src/modules/ranking/ranking.controller.ts:36\n                \n            \n\n\n            \n                \n                    Returns the ranking in a specific preparation type and date unit.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                PreparationType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The preparation type\n\n                                    \n                                \n                                \n                                    dateUnit\n                                    \n                                                DateUnit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The period\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTypeRankHospital\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTypeRankHospital(type: PreparationType, dateUnit: DateUnit, user: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:type/me')\n                \n            \n\n            \n                \n                    Defined in src/modules/ranking/ranking.controller.ts:50\n                \n            \n\n\n            \n                \n                    Returns the rank of the hospital associated to the user in a specific preparation type and date unit.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                PreparationType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The preparation type\n\n                                    \n                                \n                                \n                                    dateUnit\n                                    \n                                                DateUnit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The period ('day', 'month' or 'year')\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user gotten by the token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setAverageRanks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setAverageRanks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@UseGuards(new AdminGuard())\n                \n            \n\n            \n                \n                    Defined in src/modules/ranking/ranking.controller.ts:26\n                \n            \n\n\n            \n                \n                    Sets the averageRanks of all hospitals. The average rank is a simple average of the ranking in a period\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards, Put, Query } from '@nestjs/common';\nimport { RankingService } from './ranking.service';\nimport { Types } from 'mongoose';\nimport { UserService } from '../user/user.service';\nimport { AdminGuard } from '../auth/guards/admin.guard';\nimport { PreparationType } from 'src/common/preparation.type';\nimport { DateUnit } from 'src/common/date-unit.type';\nimport { DateUnitPipe } from 'src/common/pipes/date-unit.pipe';\nimport { PreparationTypePipe } from 'src/common/pipes/preparation-type.pipe';\nimport { UserDto } from 'src/common/dtos/user.dto';\nimport { User } from 'src/common/decorators/user.decorator';\nimport { HospitalIdPipe } from 'src/common/pipes/hospital-id.pipe';\n\n@Controller('ranking')\nexport class RankingController {\n  constructor(\n    private readonly rankingService: RankingService,\n    private readonly userService: UserService,\n  ) {}\n\n  /**\n   * Sets the averageRanks of all hospitals. The average rank is a simple average of the ranking in a period\n   */\n  @Put()\n  @UseGuards(new AdminGuard())\n  async setAverageRanks() {\n    return await this.rankingService.setAverageRanks();\n  }\n\n  /**\n   * Returns the ranking in a specific preparation type and date unit.\n   * @param type The preparation type\n   * @param dateUnit The period\n   */\n  @Get('/:type')\n  async getTypeRank(\n    @Param('type', new PreparationTypePipe()) type: PreparationType,\n    @Query('dateUnit', new DateUnitPipe()) dateUnit: DateUnit,\n  ) {\n    return await this.rankingService.getTypeRank(type, dateUnit);\n  }\n\n  /**\n   * Returns the rank of the hospital associated to the user in a specific preparation type and date unit.\n   * @param type The preparation type\n   * @param dateUnit The period ('day', 'month' or 'year')\n   * @param user The user gotten by the token\n   */\n  @Get('/:type/me')\n  async getTypeRankHospital(\n    @Param('type', new PreparationTypePipe()) type: PreparationType,\n    @Query('dateUnit', new DateUnitPipe()) dateUnit: DateUnit,\n    @User() user: UserDto,\n  ) {\n    return await this.rankingService.getTypeRank(\n      type,\n      dateUnit,\n      await this.userService.getHospitalID(user.sub),\n    );\n  }\n\n  /**\n   * Returns the average rank of an hospital in a period ('day' returns null)\n   * @param hospitalId The hospital ID\n   * @param dateUnit The period\n   */\n  @Get('position/:hospitalId')\n  async getRank(\n    @Param('hospitalId', new HospitalIdPipe()) hospitalId: Types.ObjectId,\n    @Query('dateUnit', new DateUnitPipe()) dateUnit: DateUnit,\n  ) {\n    return await this.rankingService.getAverageRank(dateUnit, hospitalId);\n  }\n\n  // @Get('/:type/:hospitalId')\n  // async getTypeRankHospital(\n  //   @Param('type', new PreparationTypePipe()) type: PreparationType,\n  //   @Param('hospitalId', new HospitalIdPipe()) hospitalId: Types.ObjectId,\n  //   @Query('dateUnit', new DateUnitPipe()) dateUnit: DateUnit,\n  // ) {\n  //   return await this.rankingService.getRank(type, dateUnit, hospitalId);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RankingModule.html":{"url":"modules/RankingModule.html","title":"module - RankingModule","body":"\n                   \n\n\n\n\n    Modules\n    RankingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RankingModule\n\n\n\ncluster_RankingModule_imports\n\n\n\ncluster_RankingModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nRankingModule\n\nRankingModule\n\nRankingModule -->\n\nUserModule->RankingModule\n\n\n\n\n\nHospitalsService\n\nHospitalsService\n\nRankingModule -->\n\nHospitalsService->RankingModule\n\n\n\n\n\nRankingService\n\nRankingService\n\nRankingModule -->\n\nRankingService->RankingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/ranking/ranking.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HospitalsService\n                        \n                        \n                            RankingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RankingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RankingController } from './ranking.controller';\nimport { RankingService } from './ranking.service';\nimport { PreparationSchema } from 'src/common/schemas/preparation.schema';\nimport { HospitalSchema } from 'src/common/schemas/hospital.schema';\nimport { RankSchema } from 'src/common/schemas/rank.schema';\nimport { UserModule } from '../user/user.module';\nimport { HospitalsService } from '../hospitals/hospitals.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: 'Preparation', schema: PreparationSchema },\n      { name: 'Hospital', schema: HospitalSchema },\n      { name: 'Rank', schema: RankSchema },\n    ]),\n    UserModule,\n  ],\n  controllers: [RankingController],\n  providers: [RankingService, HospitalsService],\n})\nexport class RankingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RankingService.html":{"url":"injectables/RankingService.html","title":"injectable - RankingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RankingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/ranking/ranking.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAverageRank\n                            \n                            \n                                    Private\n                                getRanksQuery\n                            \n                            \n                                    Async\n                                getTypeRank\n                            \n                            \n                                    Async\n                                setAverageRanks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(preparationModel: Model, hospitalModel: Model, rankModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/ranking/ranking.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        preparationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hospitalModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rankModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAverageRank\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAverageRank(dateUnit: DateUnit, hospitalId: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/ranking/ranking.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dateUnit\n                                    \n                                                DateUnit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hospitalId\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getRanksQuery\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRanksQuery(start: moment.Moment, end: moment.Moment, pType)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/ranking/ranking.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    start\n                                    \n                                            moment.Moment\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                            moment.Moment\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTypeRank\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTypeRank(pType: PreparationType, dateUnit: DateUnit, hospitalID?: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/ranking/ranking.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pType\n                                    \n                                                PreparationType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dateUnit\n                                    \n                                                DateUnit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hospitalID\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setAverageRanks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setAverageRanks()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/ranking/ranking.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Type } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport * as moment from 'moment';\nimport { Preparation } from 'src/common/interfaces/preparation.interface';\nimport { Hospital } from 'src/common/interfaces/hospital.interface';\nimport { Rank } from 'src/common/interfaces/rank.interface';\nimport {\n  PreparationType,\n  PreparationTypesArray,\n} from 'src/common/preparation.type';\nimport { DateUnit, DateUnitsArray } from 'src/common/date-unit.type';\nimport { TypeRank } from 'src/common/interfaces/type-rank.interfaces';\n\n@Injectable()\nexport class RankingService {\n  constructor(\n    @InjectModel('Preparation')\n    private readonly preparationModel: Model,\n    @InjectModel('Hospital')\n    private readonly hospitalModel: Model,\n    @InjectModel('Rank')\n    private readonly rankModel: Model,\n  ) {}\n\n  /**\n   * @description According to this article ( https://jkchu.com/2016/02/17/designing-and-implementing-a-ranking-algorithm/ ),\n   *  I've decided to implement the ranking as a query because of low-impact and relatively semplicity.\n   *  A better way could be to write the ranking table in a collection and retrive it from a simpler query, updating it every day or,\n   *  in an even better way scheduling a trigger that reacts to the 'hospitals' and 'preparations' collections.\n   */\n  async getTypeRank(\n    pType: PreparationType,\n    dateUnit: DateUnit,\n    hospitalID?: Types.ObjectId,\n  ): Promise {\n    let query: any[];\n    switch (dateUnit) {\n      case 'day':\n        query = this.getRanksQuery(\n          moment(Date.now()).startOf('day'),\n          moment(Date.now()).endOf('day'),\n          pType,\n        );\n        break;\n      case 'month':\n        query = this.getRanksQuery(\n          moment(Date.now()).startOf('month'),\n          moment(Date.now()).endOf('month'),\n          pType,\n        );\n        break;\n      case 'year':\n        query = this.getRanksQuery(\n          moment(Date.now()).startOf('year'),\n          moment(Date.now()).endOf('year'),\n          pType,\n        );\n        break;\n      default:\n        throw new Error(`'${dateUnit}' unknown`);\n    }\n    if (hospitalID) {\n      query.push({ $match: { _id: hospitalID } });\n    }\n    return await this.preparationModel.aggregate(query).exec();\n  }\n\n  async getAverageRank(dateUnit: DateUnit, hospitalId: Types.ObjectId) {\n    return (await this.hospitalModel\n      .findById(hospitalId, 'averageRanks')\n      .exec()).averageRanks.find(r => r.period === dateUnit);\n  }\n\n  /**\n   * @description It sets the average hospitals' ranks\n   * @param dateUnit the date unit to calculate\n   */\n  async setAverageRanks() {\n    const hospitalsMap: Map> = new Map();\n    // const start = Date.now();\n    for (const type of PreparationTypesArray) {\n      for (const dateUnit of DateUnitsArray) {\n        for (const rankingEntry of await this.getTypeRank(type, dateUnit)) {\n          if (hospitalsMap.has(rankingEntry._id.toHexString())) {\n            if (\n              hospitalsMap.get(rankingEntry._id.toHexString()).has(dateUnit)\n            ) {\n              hospitalsMap\n                .get(rankingEntry._id.toHexString())\n                .get(dateUnit)\n                .push(rankingEntry.ranking);\n            } else {\n              hospitalsMap\n                .get(rankingEntry._id.toHexString())\n                .set(dateUnit, [rankingEntry.ranking]);\n            }\n          } else {\n            hospitalsMap.set(\n              rankingEntry._id.toHexString(),\n              new Map([[dateUnit, [rankingEntry.ranking]]]),\n            );\n          }\n        }\n      }\n    }\n    for (const hospitalEntry of hospitalsMap) {\n      const vals = new Array();\n      for (const periodValues of hospitalEntry[1]) {\n        const rank = new this.rankModel();\n        rank._id = null;\n        rank.period = periodValues[0];\n        rank.rank = Math.ceil(\n          periodValues[1].reduce((a, b) => a + b) / periodValues[1].length,\n        );\n        rank.lastUpdate = new Date(Date.now());\n        vals.push(rank);\n      }\n      await this.hospitalModel\n        .findByIdAndUpdate(Types.ObjectId(hospitalEntry[0]), {\n          averageRanks: vals,\n        })\n        .exec();\n    }\n    // console.log(Date.now() - start);\n    return true;\n  }\n\n  private getRanksQuery(\n    start: moment.Moment,\n    end: moment.Moment,\n    pType,\n  ): any[] {\n    return [\n      {\n        $match: {\n          type: pType,\n          date: {\n            $gte: start.toDate(),\n            $lte: end.toDate(),\n          },\n        },\n      },\n      {\n        $group: {\n          _id: '$hospital',\n          tot: {\n            $sum: '$numberOfPreparations',\n          },\n        },\n      },\n      {\n        $project: {\n          media: {\n            $divide: ['$tot', end.diff(start, 'day') + 1],\n          },\n        },\n      },\n      {\n        $sort: {\n          media: -1,\n        },\n      },\n      {\n        $group: {\n          _id: 0,\n          hospitals: {\n            $push: {\n              hospId: '$_id',\n              media: '$media',\n            },\n          },\n        },\n      },\n      {\n        $project: {\n          _id: 0,\n        },\n      },\n      {\n        $unwind: {\n          path: '$hospitals',\n          includeArrayIndex: 'ranking',\n        },\n      },\n      {\n        $lookup: {\n          from: 'hospitals',\n          localField: 'hospitals.hospId',\n          foreignField: '_id',\n          as: 'hospitals.hospName',\n        },\n      },\n      {\n        $project: {\n          _id: '$hospitals.hospId',\n          name: '$hospitals.hospName.name',\n          media: '$hospitals.media',\n          ranking: 1,\n        },\n      },\n      {\n        $unwind: {\n          path: '$name',\n        },\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TypeRank.html":{"url":"interfaces/TypeRank.html","title":"interface - TypeRank","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TypeRank\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/type-rank.interfaces.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                        media\n                                \n                                \n                                        name\n                                \n                                \n                                        ranking\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:     Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The hospital id\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        media\n                                    \n                                \n                                \n                                    \n                                        media:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The hospital name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ranking\n                                    \n                                \n                                \n                                    \n                                        ranking:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document, Types } from 'mongoose';\n/**\n * @description The ranking of a specific type\n */\nexport interface TypeRank extends Document {\n  /**\n   * The hospital id\n   */\n  _id: Types.ObjectId;\n  /**\n   * The hospital name\n   */\n  name: string;\n  ranking: number;\n  media: number;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/user.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        authId\n                                \n                                \n                                        hospital\n                                \n                                \n                                        hospitalID\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authId\n                                    \n                                \n                                \n                                    \n                                        authId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hospital\n                                    \n                                \n                                \n                                    \n                                        hospital:         Types.ObjectId | Hospital\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Types.ObjectId | Hospital\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hospitalID\n                                    \n                                \n                                \n                                    \n                                        hospitalID:     Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document, Types } from 'mongoose';\nimport { Hospital } from './hospital.interface';\n\nexport interface User extends Document {\n  readonly authId: string;\n  readonly hospitalID: Types.ObjectId;\n  readonly hospital: Types.ObjectId | Hospital;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getHospital\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getHospital\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHospital(user: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/linkedinToken')\n                \n            \n\n            \n                \n                    Defined in src/modules/user/user.controller.ts:15\n                \n            \n\n\n            \n                \n                    The hospital associated to the user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user gotten by the token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { UserService } from './user.service';\nimport { Controller, Get } from '@nestjs/common';\nimport { User } from 'src/common/decorators/user.decorator';\nimport { UserDto } from 'src/common/dtos/user.dto';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   * The hospital associated to the user\n   * @param user The user gotten by the token\n   */\n  @Get('/linkedinToken')\n  async getHospital(@User() user: UserDto): Promise {\n    return await this.userService.getLinkedinToken(user.sub);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sub\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dtos/user.dto.ts:5\n                            \n                        \n\n                \n                    \n                        The user's authID\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserDto {\n  /**\n   * The user's authID\n   */\n  sub: string;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/UserGuard.html":{"url":"guards/UserGuard.html","title":"guard - UserGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    UserGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/guards/user.guard.ts\n            \n\n\n\n\n                \n                Example\n                \n                \n                \n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/user.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/user.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/modules/user/user.service';\n/**\n * @classdesc It checks if the logged user exists in the users's collection\n */\n@Injectable()\nexport class UserGuard implements CanActivate {\n  // UserService is exported by UserModule\n  constructor(private readonly userService: UserService) {}\n  async canActivate(context: ExecutionContext): Promise {\n    // context.getArgs()[0].user.sub contains the user's auth0 id\n    // NOTE: an 'attacker' cannot change the id becase the signature guarantees integrity\n    return !!(await this.userService.getUser(context.getArgs()[0].user.sub));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, HttpModule } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserService } from './user.service';\nimport { UserSchema } from 'src/common/schemas/user.schema';\nimport { UserController } from './user.controller';\n\n@Module({\n  imports: [\n    HttpModule,\n    MongooseModule.forFeature([{ name: 'User', schema: UserSchema }]),\n  ],\n  providers: [UserService],\n  exports: [UserService],\n  controllers: [UserController],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                managementToken\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getHospitalID\n                            \n                            \n                                    Async\n                                getLinkedinToken\n                            \n                            \n                                    Private\n                                    Async\n                                getManagementToken\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUserHospital\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user: Model, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getHospitalID\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHospitalID(pAuthId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/user/user.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pAuthId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLinkedinToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLinkedinToken(authId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/user/user.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getManagementToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getManagementToken()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/user/user.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(authId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/user/user.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserHospital\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserHospital(authId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/user/user.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            managementToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/user.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, HttpService } from '@nestjs/common';\nimport { Model, Types } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport * as jwtDecode from 'jwt-decode';\nimport { User } from 'src/common/interfaces/user.interface';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectModel('User') private readonly user: Model,\n    private readonly httpService: HttpService,\n  ) {}\n\n  private managementToken: string;\n\n  async getHospitalID(pAuthId: string): Promise {\n    // retrive the hospital's id from the passed userId\n    return (await this.user\n      .findOne({ authId: pAuthId })\n      .select('')\n      .exec()).hospital as Types.ObjectId;\n  }\n\n  async getUser(authId: string) {\n    return await this.user.findOne({ authId }).exec();\n  }\n\n  async getUserHospital(authId: string) {\n    return await this.user\n      .findById((await this.getUser(authId))._id)\n      .populate('hospital')\n      .exec();\n  }\n\n  private async getManagementToken() {\n    return (await this.httpService\n      .post(\n        `https://${process.env.AUTH0_DOMAIN}/oauth/token`,\n        {\n          client_id: process.env.AUTH0_MANAGEMENT_CLIENTID,\n          client_secret: process.env.AUTH0_MANAGEMENT_SECRET,\n          audience: process.env.AUTH0_MANAGEMENT_AUD,\n          grant_type: 'client_credentials',\n        },\n        {\n          headers: { 'content-type': 'application/json' },\n        },\n      )\n      .toPromise()).data.access_token;\n  }\n\n  async getLinkedinToken(authId: string) {\n    if (\n      !this.managementToken ||\n      jwtDecode(this.managementToken).exp \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/common/date-unit.type.ts\n            \n            variable\n            DateUnitsArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/create-hospital.dto.ts\n            \n            class\n            CreateHospitalDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/dtos/create-preparation.dto.ts\n            \n            class\n            CreatePreparationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/geoJSONMultiPoint.interface.ts\n            \n            interface\n            GeoJSONMultiPoint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interfaces/hospital.interface.ts\n            \n            interface\n            Hospital\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/interfaces/preparation.interface.ts\n            \n            interface\n            Preparation\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/interfaces/rank.interface.ts\n            \n            interface\n            Rank\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/type-rank.interfaces.ts\n            \n            interface\n            TypeRank\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/common/interfaces/user.interface.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pipes/date-unit.pipe.ts\n            \n            injectable\n            DateUnitPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/date.pipe.ts\n            \n            injectable\n            DatePipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/distance.pipe.ts\n            \n            injectable\n            DistancePipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/hospital-id.pipe.ts\n            \n            injectable\n            HospitalIdPipe\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/common/pipes/latitudine.pipe.ts\n            \n            injectable\n            LatitudinePipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/longitudine.pipe.ts\n            \n            injectable\n            LongitudinePipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/preparation-type.pipe.ts\n            \n            injectable\n            PreparationTypePipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/preparation.type.ts\n            \n            variable\n            PreparationTypesArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/schemas/geoJSONMultiPoint.schema.ts\n            \n            variable\n            GeoJSONMultiPointSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/schemas/hospital.schema.ts\n            \n            variable\n            HospitalSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/schemas/preparation.schema.ts\n            \n            variable\n            PreparationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/schemas/rank.schema.ts\n            \n            variable\n            RankSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/authentication.middleware.ts\n            \n            injectable\n            AuthenticationMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/admin.guard.ts\n            \n            guard\n            AdminGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/user.guard.ts\n            \n            guard\n            UserGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/hospitals/hospitals.controller.ts\n            \n            controller\n            HospitalsController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/modules/hospitals/hospitals.service.ts\n            \n            injectable\n            HospitalsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/preparations/preparations.controller.ts\n            \n            controller\n            PreparationsController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/preparations/preparations.service.ts\n            \n            injectable\n            PreparationsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/ranking/ranking.controller.ts\n            \n            controller\n            RankingController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/modules/ranking/ranking.service.ts\n            \n            injectable\n            RankingService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/utils/tools/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/utils/tools/logger.service.ts\n            \n            variable\n            fgcolors\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^5.4.0\n        \n            @nestjs/core : ^5.4.0\n        \n            @nestjs/mongoose : ^5.2.2\n        \n            class-transformer : ^0.2.0\n        \n            class-validator : ^0.9.1\n        \n            compression : ^1.7.4\n        \n            cors : ^2.8.5\n        \n            dotenv : ^6.2.0\n        \n            express-jwt : ^5.3.1\n        \n            helmet : ^3.16.0\n        \n            joi : ^14.3.1\n        \n            jwks-rsa : ^1.3.0\n        \n            jwt-decode : ^2.2.0\n        \n            moment : ^2.24.0\n        \n            mongoose : ^5.4.8\n        \n            reflect-metadata : ^0.1.12\n        \n            rimraf : ^2.6.2\n        \n            rxjs : ^6.2.2\n        \n            tsconfig-paths : ^3.8.0\n        \n            typescript : ^3.0.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nbash\n$ npm install\nRunning the app\n```bash\ndevelopment\n$ npm run start\nwatch mode\n$ npm run start:dev\nproduction mode\n$ npm run start:prod\n```\nTest\n```bash\nunit tests\n$ npm run test\ne2e tests\n$ npm run test:e2e\ntest coverage\n$ npm run test:cov\n```\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HospitalsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PreparationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RankingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_HospitalsModule\n\n\n\ncluster_HospitalsModule_providers\n\n\n\ncluster_PreparationsModule\n\n\n\ncluster_PreparationsModule_providers\n\n\n\ncluster_RankingModule\n\n\n\ncluster_RankingModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHospitalsModule\n\nHospitalsModule\n\nAppModule -->\n\nHospitalsModule->AppModule\n\n\n\n\n\nPreparationsModule\n\nPreparationsModule\n\nAppModule -->\n\nPreparationsModule->AppModule\n\n\n\n\n\nRankingModule\n\nRankingModule\n\nAppModule -->\n\nRankingModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nHospitalsModule -->\n\nUserModule->HospitalsModule\n\n\n\nPreparationsModule -->\n\nUserModule->PreparationsModule\n\n\n\nRankingModule -->\n\nUserModule->RankingModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nHospitalsService\n\nHospitalsService\n\nHospitalsModule -->\n\nHospitalsService->HospitalsModule\n\n\n\nRankingModule -->\n\nHospitalsService->RankingModule\n\n\n\n\n\nPreparationsService\n\nPreparationsService\n\nPreparationsModule -->\n\nPreparationsService->PreparationsModule\n\n\n\n\n\nRankingService\n\nRankingService\n\nRankingModule -->\n\nRankingService->RankingModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DateUnit   (src/.../date-unit.type.ts)\n                        \n                        \n                            PreparationType   (src/.../preparation.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/date-unit.type.ts\n    \n    \n        \n            \n                \n                    \n                    DateUnit\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/common/preparation.type.ts\n    \n    \n        \n            \n                \n                    \n                    PreparationType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DateUnitsArray   (src/.../date-unit.type.ts)\n                        \n                        \n                            fgcolors   (src/.../logger.service.ts)\n                        \n                        \n                            GeoJSONMultiPointSchema   (src/.../geoJSONMultiPoint.schema.ts)\n                        \n                        \n                            HospitalSchema   (src/.../hospital.schema.ts)\n                        \n                        \n                            PreparationSchema   (src/.../preparation.schema.ts)\n                        \n                        \n                            PreparationTypesArray   (src/.../preparation.type.ts)\n                        \n                        \n                            RankSchema   (src/.../rank.schema.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/date-unit.type.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DateUnitsArray\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['day', 'month', 'year']\n                        \n                    \n\n\n            \n        \n\n    src/utils/tools/logger.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fgcolors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  // '\\x1b[31m',\n  '\\x1b[32m',\n  '\\x1b[33m',\n  '\\x1b[34m',\n  '\\x1b[35m',\n]\n                        \n                    \n\n\n            \n        \n\n    src/common/schemas/geoJSONMultiPoint.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GeoJSONMultiPointSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n  type: {\n    type: String, // Don't do `{ location: { type: String } }`\n    enum: ['MultiPoint'], // 'location.type' must be 'Point'\n    required: true,\n  },\n  coordinates: {\n    // long, lat\n    type: [[Number]],\n    required: true,\n  },\n})\n                        \n                    \n\n\n            \n        \n\n    src/common/schemas/hospital.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            HospitalSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n  name: { type: String, required: true },\n  coordinates: { type: GeoJSONMultiPointSchema, required: true },\n  preparations: [\n    {\n      // ref or embedded? ref: preparations number grows very quickly\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Preparation',\n      required: false,\n    },\n  ],\n  averageRanks: [RankSchema],\n})\n                        \n                    \n\n\n            \n        \n\n    src/common/schemas/preparation.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PreparationSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  type: {\n    type: Schema.Types.String,\n    enum: PreparationTypesArray,\n    required: true,\n  },\n  numberOfPreparations: {\n    type: Schema.Types.Number,\n    required: true,\n  },\n  date: Schema.Types.Date,\n  // ref or embedded? ref: we need hospital just to the rank\n  hospital: { type: Schema.Types.ObjectId, ref: 'Hospital' },\n})\n                        \n                    \n\n\n            \n        \n\n    src/common/preparation.type.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PreparationTypesArray\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  'Liquid',\n  'Tablet',\n  'Capsules',\n  'Topical Medicines',\n  'Suppositories',\n  'Drops',\n  'Inhalers',\n  'Injections',\n  'Implants',\n  'Buccal',\n]\n                        \n                    \n\n                \n                    \n                        Used in PreparationInterface\n\n                    \n                \n\n            \n        \n\n    src/common/schemas/rank.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            RankSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n  rank: Number,\n  period: String,\n  lastUpdate: Date,\n})\n                        \n                    \n\n\n            \n        \n\n    src/common/decorators/user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            User\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data, req) => {\n  return req.user;\n})\n                        \n                    \n\n\n            \n        \n\n    src/common/schemas/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n  authId: {\n    type: String,\n    required: true,\n  },\n  // ref or embedded? ref: we don't need hospital almost never\n  hospital: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Hospital',\n  },\n})\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
